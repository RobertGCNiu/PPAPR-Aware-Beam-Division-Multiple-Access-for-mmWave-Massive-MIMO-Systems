%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SystemSchematic_new.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: robert
%%CreationDate: 2018/7/18, 14:57:29
%%BoundingBox: -260 259 356 616
%%HiResBoundingBox: -259.8840 259.8841 355.1810 615.0651
%%CropBox: -259.8840 259.8841 355.1810 615.0651
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1135 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:CreateDate="2018-07-18T14:57:18+08:00"
   xmp:CreatorTool="Acrobat PDFMaker 15 Visio 版"
   xmp:ModifyDate="2018-07-18T14:57:19+08:00"
   xmp:MetadataDate="2018-07-18T14:57:19+08:00"
   pdf:Producer="Acrobat Distiller 15.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:ba27b45b-18fa-4686-b0dd-b13567af07c8"
   xmpMM:InstanceID="uuid:139e522c-9b36-46a2-bd49-0794fe69191f"
   pdfx:Company="CUHKSZ">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Simon Pun</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
/0 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 214 
/Lookup <~
z>Y.?al.t48mGR$Kf$)74(D.2Y#R1J5aLSZmhUL#_g!@mBl.t7;P^R]T2_$3U.j6#8'+YQQ68L=rbItE
1F^J;Pz/Ku><=@GOVd)<_\i7?GiH"(%Z5Vatm)A<ba+rM6uIV3*ihpp5dLiI21\YYlJ^TFA!"9S`+WKW
5I3@cNYZC[@$]W%V_JSJ`r?;!cgSVM[q75ct&:d-r@"p>&/[\B6:,8qI#BiIn/9KP67'bLrVY*kCbQ[s
D^FC&)M\"oQB!s/N(Z(.$q4"Vr_G$eDQjOr5$0-hbBCfjU9Q@O2[=%#=S;F!AF.N]`4F'VlJ!W`<%,od
m)];VDY$4$n;f?MI9R=fkeSqqmt@STMqDHTp=j4N"u>=_-^-64*,d`94iV2pB8eB,\"dD`qa#6b82EEl
QF0I.kCk1\S,\"fH>Ht?[cjkAG(-lsE0dDj%f[@s$52CU$S\u22Sa1/Eb$jm:@@80;n@o#_t>":p[A5G
r"=[k^X90,$4[%Ng0<C9"Om,-dE:H^c>To4O*?qj2m%h&gGc+prCI:cmfH=L7]KPb?%`O;sT\u22U<'i
eLJnnotKl1Q(LN$u.X-JYQin)eqfZq[=&e5?NkM+e0+W2-t[%E^,?VEujah,!$C/n+2*>TCje&]Iq*Z#
Um+;bpqkhP"4_m?FC;*R/C`O2mQf$)41XI"tXE*H?C,T@[&m,6mH/gDP?XdG4_Dd$-@Q%*uX2(0gPP'_
6McbmJS`j`3];aESI)\`qcW03#ETSe=&Xd>+\$OI+>U5Xd/%LNOCeB5e&YFC^jG[XhWT8A+#)&!V_&If
-KdDj"dVN?T=leg[CCKFC6^8n(nWg&GMO*GXEOa;$J1F=CJ^ojV)BN%\,YF:Ugg<e-JNHT4?d)3VX)\j
%e*#01g1*n1G5;=bjX-SbT.39N1_mHOGe&]Ls]rRqj`jW*X5r11plJCI?_6Bn1cG@/Jh:'f[(_RD\UQ1
'3_Qg.:gsXTV];VD[Z_*R(4tnSh6SpOu1aaUM82rL-K5>-"^TFD$4YJAe7Q3.(\YbuNNd#FBcG@,GS;)
ImIqW<lRY?.i8NA^0'G(`SPC.HP~>
>>
/CSD add_res
/1 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 141 
/Lookup <~
z*>TCjP^R]T(_RD\3\2`\bJ(N6mGR$Ka1/Ee0-hbBAPl/%j4N"ub.P3,gsOKR=[k^X"9S`+RY?.idD`q
a>Y.?a#6b82@80;ne&]IqMf`e9!s/N(Xd>+\Wg&GM(D.2YX-JYQUQ1'3!W`<%6o?b#V2pB8aL\crd)<_
\c+prC]rIheJ8&No*#01g7Q3.(\>>`F)\j%e$jm:@Y*kCbf$)41VicfALN$u.[%Ng0g<e-Jg<\$FR"BV
af?MI9jkAG(,odm)Z(7-t_6L"6'bLrVTo4O*f$)74,T@[&;*R/ClJCI?68L=rfZq[=W03#Ein)eq-lsE
0&e5?Ne&]Lsh:'f[^os_-m,6mHG[XhWXI"tXl.t7;]W%V_CKFC6%LNOC>=_-^a1/EbJSJ`rcG@,GZ(.$
qI:cmf+;bpq#R1J5Dd$-@:d-r@hUL#_]W%Yb)\`qc5Vatm^TFA!^9"1r2(0gP9ftH:z1aaUMG[XhWb.P
3*iRZSlEElQF$4$n;1*n1G5r11pBiIn/i7?GidDj"d"p>&//Ku><?;!cg\u22S_6Bn1ah,!$beL`=`j`
3]BN%\,WKW5I&If-K^TFD$+W2-tgX4?O_m?FC`O;sT`3c[K_Qg.:Oa;$J_mHOG\"fH>?qj2m_Qp7>ah"
lu\YbuN,8qI#a18NieB5e&g!@mB*Z#Um'+YQQ/gDP?2_$3U.j6#8^8n(nd`94i~>
>>
/CSD add_res
/2 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 143 
/Lookup <~
z1F=CJO*GXE!s/N(9KP67eB5e&mGR$K\YYlJ'bLrVG[XhWleg[ClJCI?bJ(N6beL]:2CU$S#R1J5X-Sb
TaL\cr7Q3.($4$n;I:cmfiRZSlj4N"u>Y.?a[%E^,RY?.i%LNOC/Ku><\YbuNE*H?C"9S`+:d-r@XdG4
_bItE1dD`qa%h&gGJSJ`rTSe=&'+YQQ[@s$5d)3VXS;)ImHt?[cLN$u.i7?GibeL`=_Qg.:$jm:@,8qI
#];VD[]rIhe=%#=SjkAG(0I.kC^9"1rgX4?O)\`qc4YJAem,-dEBN%\,d)<_\`O;sTg<e-J@o#_t$OI+
>Q@O2[Xd>+\K5>-"c+prCZ(.$qH=L7]6SpOu*#01g)\j%ef$)41;F!AFTo4O*5r11p^TFD$jOr5$1aaU
MG$eDQYFC^jb.P3,in)eq#6b82/gDP?APl/%`3c[KJnnotM/mD4_m?FCcG@/Jm,6mH5Vatm4>&/b4tnS
h+rM6u(D.2Y+W2-t`j`3]eB,\"khP"4Kl1Q(;*R/Cg<\$FV2pB8UQ1'3Mf`e9WKW5I4"Vr_Wg&GM_Qp7
>T8A+#dDj"dW03#E_6L"6hUL#_hpp5dLiI21B2VJ)PC.HPe&]IqY*kCb'G(`Sd`94iz`jW*Xf$)74dDj
%fVicfA)A<ba!W`<%"p>&/d`97l&If-K&e5?NU5Xd/^ojV)\>>`Fl.t7;a1/Eb]rRqjZ_*R(~>
>>
/CSD add_res
/3 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 125 
/Lookup <~
^TFD$^ojV)\YbuNZ(.$qYFC^j[\B6:]rIhe`3c[K3@cNYzzWKW5I_6L"6\u22UZ(7-t[@s$5`jW*X=[k
^X`O;sT`j`3]l.t7;mGR$KbeL]:2_$3Ua1/Ee`O2mQin)eqcbmJS_mHOG=%#=ScG@/JkhP"4]W%Yb<'i
eL"p>&/cbdAO4YJAe]rRqj>":p[#6b824tnShl.t48>Y.?a,odm)-64*,_Qp7>jkAG(k1\S,leg[ClJC
I?KPb?%>=_-^ah,!$1aaUM]W%V_@o#_t?;!cg0-hbB,8qI#@STMq1F=CJ>tRQdf?MI9S;)Im<C9"Oe]Z
",h:'f[RY?.i.39N1fZq[=VicfAcG@,G];VD[;*R/C)\j%ef$)74R=fke'G(`Se&]IqVN?T=To4O*Wg&
GMXd>+\kM+e0];VDYX-JYQ.N]`4K5>-"XI"tXg<\$F^os_-W03#E68L=r+;bpq)&!V_e&]Lsa18Ni^TF
A!^8n(n_m?FC3\2`\YF:Ugb.P3*_Qg.:bItE1+W2-t(D.2YeB,\"*#01gP^R]TTSe=&!s/N(\u22S_6B
n1;F!AF^9"1rc+prCCfjU9)A<baSqqmtbeL`=\"oQB90,$4ah"lubJ(N6aL\cr~>
>>
/CSD add_res
/4 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 198 
/Lookup <~
z[@s$5mGR$Km,-dE>":p[VN?T=l.t7;f$)41g!@mBZ_*R($4$n;75ct&"9S`+1aaUM=%#=S@80;nd`94
i\u22S0I.kC@STMqZ(7-tP'_6M?;!cg/Ku><1*n1G\u22UfZq[=&e5?N'+YQQ_m?FCa1/EejOr5$2_$3
U)&!V_eB5e&9KP67G$eDQQ%*uXe&]Iqf?MI9>Y.?a;aESITo4O*6SpOu]rIhe!W`<%E*H?C^TFD$W03#
EM/mD4f$)74R=fke)\j%eJSJ`rSVM[q!s/N(]rRqj:d-r@G[XhWJ8&No[%E^,?VEujF^J;P,T@[&`O2m
Q)\`qc'bLrVe]Z",bItE1$jm:@'G(`S,8qI#6o?b#];VDY$OI+>@o#_t\"fH>m,6mH>=_-^90,$4a1/E
beB,\".j6#8NHT4?TSe=&Mf`e91F=CJj4N"uKPb?%_Qp7>/gDP?LN$u.^8n(n\>>`FkhP"42CU$S[\B6
:=[k^X&If-K_mHOGG[XhWJnnot-64*,`3c[K;*R/C(_RD\_Qg.:+W2-t%h&gGI:cmfA5Gr"a18Ni+;bp
q];VD[z_6Bn1gX4?O2(0gPIqW<lT8A+#F'VlJN-0"<^9"1rjkAG(H=L7]beL`=<C9"O"p>&/-lsE0^TF
A!in)eq^os_-*Z#UmXd>+\?qj2m.39N1_6L"6DHTp=kM+e0X-SbTSqqmtcbmJSbeL]:WKW5I#R1J5B2V
J)L2Uc+4"Vr_.N]`4`jW*XlJCI?Y*kCbZC[@$hUL#_U5Xd/P^R]Te&]Ls<'ieLleg[CYFC^j+rM6u9ft
H:Ya^jmVicfA`O;sT\YYlJ,odm)4tnShah"lugsOKR:H^c>Dd$-@3@cNYEElQFl.t480-hbBV2pB8#6b
82i7?Gik1\S,^ojV))A<ba\YbuNcbdAOd)3VXd)<_\C/n+2`j`3]b.P3,*#01gdD`qah:'f[Q[sD^ah,
!$UQ1'3;F!AFO*GXES;)Im*>TCj~>
>>
/CSD add_res
/5 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 189 
/Lookup <~
z=%#=SkhP"4mGR$Kg<e-J*Z#Um^TFD$in)eqfZq[=l.t48YF:Ug3@cNY.N]`4&e5?N2_$3U5;=bjaL\c
rK5>-".39N1;*R/CjkAG(Kl1Q(68L=r,T@[&Jnnoti7?Gi%LNOC\YbuN]W%Ybc+prC$jm:@PC.HPQ%*u
X[%E^,]W%V_gX4?OHt?[cV2pB84YJAeleg[C?;!cgY*kCb-lsE0BiIn/90,$4'G(`SZ_*R(P'_6MIV3*
i_mHOG^9"1rz)\`qc\YYlJ%h&gG[\B6:[@s$54tnShW03#E(D.2Y8NA^0&If-KdDj%fWg&GMN-0"<H"(
%Z$OI+>`j`3]E*H?C>":p[=@GOVO*GXE+W2-tZC[@$4"Vr_'+YQQ`jW*XEElQFjOr5$@STMq-64*,hpp
5dKPb?%)\j%e];VDYa1/EbFC&)M@80;n[%Ng0Ya^jmcG@,G(_RD\;F!AF=[k^X9KP67<'ieL!s/N(`O;
sTaLSZmF^J;P?qj2m+;bpq];VD[7Q3.(?VEujG[XhWX-JYQkM+e0\"oQBOa;$JgsOKRVicfAMf`e9NHT
4?g<\$FcG@/J$4$n;`O2mQah,!$WKW5I!W`<%_m?FC2(0gP)A<bab.P3,82rL-gsXTV]rIhee&]LseB5
e&To4O*eB,\""9S`+/Ku><lJCI?]rRqjXI"tXG$eDQcbdAO2CU$Sk1\S,.j6#8P^R]TLiI21;aESIf$)
41G[XhW\u22U^ojV)J8&No"p>&/Z(7-t:H^c>>=_-^#6b82d)3VXd`94i'bLrVcbmJS>tRQdIqW<l#R1
J5f?MI9m,6mHd)<_\H=L7]L2Uc+,8qI#JSJ`rDHTp=_Qp7>BN%\,0I.kCiRZSl6o?b#b.P3*\u22SB2V
J)5Vatmg!@mB`3c[K<C9"OX-SbTC/n+26SpOu3\2`\/gDP?\>>`F4>&/bM/mD4~>
>>
/CSD add_res
/6 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 196 
/Lookup <~
z:H^c>kM+e0mGR$Ki7?Gi.N]`4Z(7-tjOr5$f?MI9k1\S,^os_-z4"Vr_-lsE0&If-K2_$3U4tnSh`O2
mQPC.HP,T@[&90,$4^TFD$l.t7;Q@O2[75ct&,odm)Kl1Q(iRZSlIqW<l#R1J5\"oQB];VDYd`94i'G(
`SG$eDQYFC^j82rL-[%Ng0]W%V_]rIhegsXTVG[XhWXI"tX2(0gPDHTp=To4O*=[k^X0-hbBC/n+2M/m
D4]rRqj"p>&/$4$n;\>>`F+rM6u\u22SZC[@$>=_-^m,-dE4>&/b!W`<%$OI+>G[XhW*#01g9ftH:>":
p[)A<ba]W%Yb(D.2YbeL`=[\B6:F'VlJbItE1;aESIHt?[c:d-r@Y*kCbJSJ`r/gDP?WKW5I<'ieL$jm
:@_6Bn1beL]:)\`qcJnnot*>TCjg<e-J+;bpq^ojV))\j%e=@GOV6o?b#VN?T=e&]LsZ_*R(7Q3.(?VE
uj=%#=S?qj2m>Y.?a5Vatm"9S`+^TFA!cG@,GjkAG('+YQQEElQFT8A+#lJCI?Oa;$JI:cmfKPb?%Q%*
uX\YbuNb.P3*APl/%^9"1rd)<_\H=L7]\u22U;F!AFXdG4_];VD[`j`3]Xd>+\/Ku><X-JYQBN%\,eB,
\"Mf`e9m,6mHFC&)MIV3*i_mHOGCKFC66SpOub.P3,Z(.$qYa^jm[%E^,e&]Iq&e5?NgX4?OK5>-"e]Z
",dD`qaCfjU9\YYlJ<C9"OWg&GMfZq[=l.t483@cNYB2VJ).j6#8U5Xd/dDj"d%h&gGNHT4?RY?.ia18
Ni@o#_t!s/N([@s$5F^J;P5;=bjf$)41+W2-t3\2`\_Qp7>N-0"<`O;sTh:'f[J8&NoeB5e&P'_6M1*n
1GYF:Ug_m?FCleg[CV2pB88NA^01aaUM)&!V_#6b82?;!cg9KP675r11pin)eqd`97l'bLrV1F=CJ(_R
D\0I.kCE*H?CdDj%f~>
>>
/CSD add_res
/7 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 197 
/Lookup <~
z>Y.?al.t48mGR$KeB5e&'bLrV$OI+>ah,!$hUL#_g<\$Fl.t7;O*GXE2CU$S.j6#8'+YQQ2_$3U68L=
rbJ(N6F'VlJ!W`<%/gDP?>":p[dDj%fG[XhW5;=bj)&!V_+W2-tIV3*iM/mD4(_RD\\YYlJ^TFD$a1/E
e!s/N(XI"tXZ(7-t]W%V_g!@mBJnnot?VEujRY?.i82rL-9KP67#R1J5[\B6:,8qI#C/n+2:H^c>(D.2
YXdG4_R"BVa[@s$50I.kC[%E^,Ya^jm\"oQB3\2`\H"(%Zin)eqE*H?CP^R]T;*R/C<C9"O,T@[&,odm
)\u22U$4$n;Q%*uXTSe=&APl/%jkAG(d)3VXUQ1'3To4O*d`97l'G(`SFC&)Mk1\S,?;!cgcbdAOQ@O2
[1aaUMkhP"4CfjU91F=CJ[%Ng0G[XhW];VDY"p>&/JSJ`r`O2mQ%h&gG=[k^X;aESI?qj2m.39N1+;bp
q\u22Sm,-dEV2pB8>tRQd&e5?NbeL]:IqW<l`j`3]kM+e0>=_-^)\`qccbmJS#6b82Z(.$qJ8&No@o#_
t)A<baDd$-@fZq[=eB,\"hpp5dZ_*R(z]rIheleg[CA5Gr"*#01ggX4?O\"fH>g<e-J"9S`+ah"luYF:
UgiRZSl-64*,\>>`FVicfAc+prC<'ieL75ct&WKW5I+rM6udDj"dG$eDQ4"Vr_e&]IqL2Uc+@STMq%LN
OCd`94i$jm:@dD`qaSVM[q]rRqj];VD[VN?T=N-0"<NHT4?Xd>+\d)<_\6SpOuf?MI9Mf`e9cG@,G2(0
gP.N]`4BiIn/X-JYQ`jW*XgsOKRlJCI?BN%\,9ftH:7Q3.(W03#E)\j%eHt?[cZC[@$_6Bn18NA^0:d-
r@*>TCjLN$u.B2VJ)0-hbB_6L"6=%#=S5Vatm6o?b#/Ku><DHTp=YFC^jU5Xd/R=fke^TFA!Q[sD^^9"
1rY*kCb4tnShWg&GMS;)Im~>
>>
/CSD add_res
/8 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 72 
/Lookup <~
m,-dEmGR$KiRZSl-64*,T8A+#VicfAX-SbTi7?Gil.t48[%E^,VN?T=W03#EXI"tX]W%V_dDj"dleg[C
68L=rzdDj%f+W2-t&e5?NF^J;PjOr5$@STMq$jm:@d`94i.j6#8IqW<lLN$u.gsXTVXd>+\.39N1^9"1
ra1/EeZ(.$q_Qp7>P'_6McG@/J.N]`4`O;sT`jW*X'G(`S%LNOCB2VJ)^ojV)beL`=e]Z",m,6mHjkAG
(in)eq82rL-2(0gPR"BVa^TFA!,odm)b.P3*_mHOG\u22Sah,!$2CU$S+;bpqE*H?CG$eDQH"(%Z@80;
n!s/N(g!@mBf?MI9d)<_\dD`qaf$)74_6Bn1$4$n;~>
>>
/CSD add_res
/9 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 97 
/Lookup <~
T8A+#]W%Yb\"fH>Z(.$qYFC^j[@s$5]rIheZ(7-t(D.2Yz.39N1]rRqj];VDY[%Ng0\>>`FZC[@$XdG4
_a18NibeL`=mGR$KdDj"da1/Eb]W%V_(_RD\/Ku><a1/EecG@/Jk1\S,gsOKRb.P3*`O2mQ_6L"6R=fk
e"9S`+f$)74.N]`4?qj2mg!@mB+W2-t5Vatmm,6mHO*GXE$OI+>NHT4?\"oQBin)eqG[XhWdDj%f)&!V
_1F=CJleg[CVN?T='bLrVd`97lH=L7]X-JYQ1aaUMN-0"<beL]:$jm:@\YbuN+;bpqg<\$FAPl/%P'_6
M7Q3.(TSe=&fZq[=_mHOGz/gDP?i7?Gim,-dE;*R/C>":p[%LNOCd)<_\#6b825;=bjkhP"4E*H?CYF:
UgeB5e&'+YQQ<'ieLKPb?%LiI21"p>&/_m?FClJCI?e]Z",*#01gA5Gr"Q[sD^hUL#_H"(%Z`O;sT1*n
1G~>
>>
/CSD add_res
/10 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 119 
/Lookup <~
SVM[q\YYlJYa^jmYFC^jLiI21zNHT4?\YbuNZ(.$qZ(7-t\u22S3\2`\H=L7]Z_*R(^9"1r4tnShcG@,
GmGR$Kd)3VXT8A+#VN?T=beL`=jOr5$a18Ni68L=rOa;$JdDj"dkM+e0b.P3,"p>&/bJ(N6JSJ`r`jW*
XeB,\"'G(`S5r11pm,6mHCKFC6KPb?%beL]:$jm:@XdG4_G[XhWU5Xd/d`97l1*n1Gz,T@[&gsXTV>=_
-^)A<baf$)41a1/Ee(_RD\gX4?OPC.HP'+YQQ*Z#UmcbmJSdDj%f%h&gGhpp5d^8n(nleg[C90,$4FC&
)Mk1\S,.39N1)&!V__6L"6'bLrVlJCI?iRZSl/Ku><l.t48ah"lu\u22U2CU$S2(0gPe&]Iq4"Vr__Qg
.:gsOKRm,-dE;aESI\>>`Fc+prC^ojV)b.P3*BiIn/#R1J575ct&l.t7;j4N"uY*kCb\"fH>"9S`+_mH
OG6SpOu9KP67EElQF`3c[K!s/N(@o#_taL\crf?MI9F'VlJd`94iHt?[c@STMqS;)Im[\B6:!W`<%Nd#
FBR=fkeR"BVaVicfAV2pB8Xd>+\];VDY~>
>>
/CSD add_res
/11 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 143 
/Lookup <~
S;)Im\>>`FYa^jmYFC^j\"oQBQ%*uXzIV3*i\u22SZ(.$q\YbuN=@GOV<C9"O\YYlJ]rIheCKFC6[%E^
,cG@,GmGR$Kd`94iXd>+\bJ(N6lJCI?b.P3*APl/%cG@/Jm,6mHF^J;P"p>&/ah"luPC.HP\u22Uin)e
q0I.kC)&!V_g<e-JX-SbT"9S`+IqW<l'G(`SOa;$JSqqmt@o#_tl.t481aaUM+W2-tg<\$FC/n+2$OI+
>eB,\"(_RD\z`3c[K_6Bn1X-JYQ>=_-^j4N"u^8n(nDd$-@4>&/bleg[C?VEuj6SpOul.t7;2_$3U^TF
A!_mHOG-lsE0gsOKR!W`<%e&]Ls%h&gG!s/N(_Qg.:R"BVaZC[@$&If-KhUL#_P'_6M#6b82'+YQQ&e5
?N#R1J5d)<_\[%Ng0e]Z",'bLrV:H^c>m,-dERY?.iDHTp=khP"4.39N1I:cmff$)74dDj"ddDj%fG$e
DQMf`e94YJAek1\S,fZq[=^TFD$^ojV)d)3VXO*GXE>":p[@80;nXdG4_K5>-"jOr5$M/mD4)A<bag!@
mBUQ1'36o?b#+rM6u0-hbBi7?Gi)\j%ef$)41e&]Iq`j`3]YF:UgiRZSl*#01gA5Gr"*Z#Um9KP67[@s
$51*n1GLiI21-64*,KPb?%?;!cgTSe=&_m?FC3\2`\2(0gP_6L"6a1/EeU5Xd/];VD[];VDY~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -615.065 translate
pgsv
[0 1 -1 0 355.181 0 ]ct
gsave
np
gsave
0 0 mo
0 615.065 li
355.181 615.065 li
355.181 0 li
cp
clp
11.7233 153.705 mo
159.095 153.705 li
159.095 11.9994 li
11.7233 11.9994 li
cp
false sop
0 0 0 0 cmyk
f
1.19919 lw
1 lc
1 lj
10 ml
[8.39681 5.9976 ] 0 dsh
false sadj
159.095 153.705 mo
159.095 11.9995 li
11.7233 11.9995 li
11.7233 153.705 li
159.095 153.705 li
cp
.437324 .904234 1 .107881 cmyk
@
90.0739 590.935 mo
274.032 590.935 li
274.032 253.743 li
90.0739 253.743 li
cp
0 0 0 0 cmyk
f
274.032 590.935 mo
274.032 253.743 li
90.0739 253.743 li
90.0739 590.935 li
274.032 590.935 li
cp
.437324 .904234 1 .107881 cmyk
@
149.814 445.028 mo
220.691 445.028 li
220.691 392.616 li
149.814 392.616 li
cp
0 0 0 0 cmyk
f
.71968 lw
[] 0 dsh
149.814 445.028 mo
220.691 445.028 li
220.691 392.616 li
149.814 392.616 li
cp
.92929 .879301 .889677 .799283 cmyk
@
220.691 445.028 mo
cp
@
114.4 341.326 mo
249.022 341.326 li
249.022 288.913 li
114.4 288.913 li
cp
0 0 0 0 cmyk
f
114.4 341.326 mo
249.022 341.326 li
249.022 288.913 li
114.4 288.913 li
cp
.92929 .879301 .889677 .799283 cmyk
@
249.022 341.326 mo
cp
@
156.897 392.616 mo
156.897 350.265 li
@
153.673 351.047 mo
156.897 341.326 li
160.169 351.047 li
153.673 351.047 li
ef
/12 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /12 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FLDBAA+TimesNewRomanPSMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (FLDBAA+TimesNewRomanPSMT)
%%Title: (FLDBAA+TimesNewRomanPSMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /FLDBAA+TimesNewRomanPSMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-568 -307 2046 1040} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 4685 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 16 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB
222483BD74F8B> |
39 <001C60D8A8C9B6079F62679EB6BE171B70F78590F81AB62F69F1BD2EFC86
EAE566847745E296D0CF61872DA4D8690C62AB23EE8E1DEB0EAD4BD93A2494CA
759A81248BAF55E0D2E2E5FE71261287BF00F8CDF501793AB3272F80F7AE3E40
7CA730AC3648B3AC2D58C8D1FD60CD7DB1F886A79A4080D8870256B6E127906D
500379950803F077453028FB6169> |
76 <001C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F
4D9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78
F98C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE3
65B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A6400850
90E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCB
CB8CA3E9F85837FAC6> |
74 <001C60D8A8C9B7A73DAC44F2C448ECAF253E44055AA4AFC4D4E618BBF7F6
0847F4AD57852D125F52503D138EEBB5C35DB7E6FF089D85EF3D59177D6853B7
FF4DCA48A2C6450DAF6AE7485D918680B6246955433B7E96C0D52B86F6985D93
AEA8FD99F7CE5A6EDF9F82F3DCD54C24AC7F5725E8D752728B16161496E9D02E
A707BCC03E7CE1BDA2E3632B4A11707F59DF2FD8556EC51A6594DBA10EC63EB7
A8585255CC0C8C8B32CD6316A41829AE725CE606F4A4FD4DA668556D79F4AC25
BF9E697A5DB9F54B573E1EAA6D791100EAD10708C7E706E8CBDD596589510D4E
A45E3CA12E8144CF2A4E025D5293F77BF25BA77276DF7C97999133B17612ABFF
D70E77479B9C8ABBB3A51D3A6F6F66CA99610B1A23618D13E1A07B26D29ACFC8
191E5B2829F3C990A5C474E53FC8B282F11A7FFA86D56BD2349AEC811B22D300
2781921B9EDDEAA1B62C5F206266BA751F865F9A5F5AF517BC35F6F732012015
D0BB42652388A219FCF002C2C0335D2D190C0C425C4FA28367480051E56A90DD
46F1C707> |
87 <001C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED294
48713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC
43DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E79
8B36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |
68 <001C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC55
0DEC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C
6B177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB
333E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385F
DB0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E
70BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A298
95DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B7
37B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE327
2EF1EF1464C3F0D45D7CBB8749AF571E09> |
79 <001C60D8A8C9B854D0F40B290C0C99C039EA88FDD293C1FEAB15D2F6B8C4
304B80428A9C9B5571B0EE47CC29A6D67DEE51ABBBE57F6DDF0C02037EE8B682
8D244FB880634A92D947174D08130E6E2CF978B5067AA82A4CABC55E600FCE55
27D6441CE02F5A28D63A618F> |
3 <001C60D8A8C9B8707C25> |
51 <001C60D8A8C9B7EF322B88F9F448EE5C6C6600BEF9C3C9A017B9BABF8764
58925BFD3DF1270B888D0A52682DD77562B0592DCEFA4305CC7C82B5C217C153
D7D799EF75C3E1B47B2F2C3741BE023ABA656D3600645948113D9E1ACE5988E8
86C2CAB89042DA868AC9EEC60CE17BA00926C89C442DF26FC8F7E4DF94B56A18
CFB31DE37DED0B361C6E9E1A158721E9F2BF357AD3A9D82EC3F61E7737142FF1
2086F5CF2AAB01A87FB3B34AEED6F7C6CCE06EC32D6DE2EC0B548299344251FB
C628> |
85 <001C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2
CE6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E9
83E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B
53A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA4
55AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D
8C360275B503E4954E912CD342> |
72 <001C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2B
EAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A
15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7F
FA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA5013189
84A59E1CFFFD06EA629758085868D3F5F7204292> |
70 <001C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438EC
C54400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F4
2A6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F
9C2999730E7919239B324086FEA852156F456647AA0692084759C352D6998971
799F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |
82 <001C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD4
416250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDA
F996A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA43
6702294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B6
8D9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |
71 <001C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D20
3065B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD332
9A86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB8
57EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5C
CB01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD1
04E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A61887936278
3A36815EA1CE5876FAC4F83CDFE1BD4A> |
36 <001C60D8A8C9B6079F6D0C3DD1DA701F2FEF50BE2CCF679467EAB463D54C
495B1FC98737C4805A67EB9B211579E256E1BCD120087B7083980EFC748D95F1
5A9738703A6CB4125517112E8D63595864B93D16C7B325AB1759098D24D8A43A
63AEECA533864B64013C499C4207455D5210408E58672A172F78CB14D7398507
1102DFA93B6532> |
81 <001C60D8A8C9B7A73DB913C38909CDA29FD53BC2807766C389AFB9ED86F7
BC81642DEC755C464ECEF36210D9B2C516FEA8C1248DF87B00C42E8B7B13BCCD
9D4DADECDD469C646397E88CF560CD28B02CAE7D1B9203699A1DE9CF796CD494
DF60582CAFD70B7F17C1569B79CFC1B11937F06CBBF98FB3F8ABA83215B28002
6130687B8B88299FC622B1B9C743E6B4E2D3E657B3D5566E1938323637D7929F
2E277006B7F4C91822AAA6911E494E2AD0998CB1FC1434E1920012738BB988F6
A0027198438FE663C2EACF82CEB86F7C727594> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /FLDBAA+TimesNewRomanPSMT-Identity-H /Identity-H 0 [/FLDBAA+TimesNewRomanPSMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/REFKNH+TimesNewRomanPSMT /FLDBAA+TimesNewRomanPSMT-Identity-H findfont ct_VMDictPut
REFKNH+TimesNewRomanPSMT [0 -12.0164 -12.0164 0 0 0 ]msf
167.448 435.601 mo
(\000'\000L\000J\000L\000W\000D\000O\000\003)
[-8.66632 -3.33102 -5.99869 -3.33099 -3.33102 -5.32578 -3.33099 0 ]ysh
181.855 440.239 mo
(\0003\000U\000H\000F\000R\000G\000H\000U)
[-6.67157 -3.99182 -5.32574 -5.32578 -5.99866 -5.99869 -5.32574 0 ]ysh
167.448 332.476 mo
(\000$\000Q\000D\000O\000R\000J\000\003)
[-8.66632 -5.99866 -5.32574 -3.33102 -5.99866 -5.99869 0 ]ysh
181.855 336.093 mo
(\0003\000U\000H\000F\000R\000G\000H\000U)
[-6.66425 -3.9845 -5.31842 -5.31842 -5.99133 -5.99133 -5.31842 0 ]ysh
241.939 246.123 mo
232.023 246.123 li
.92929 .879301 .889677 .799283 cmyk
@
185.277 479.612 mo
185.277 453.919 li
@
182.004 454.749 mo
185.277 445.028 li
188.501 454.749 li
182.004 454.749 li
ef
1 /12 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: NBIAAA+TimesNewRomanPS-BoldMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (NBIAAA+TimesNewRomanPS-BoldMT)
%%Title: (NBIAAA+TimesNewRomanPS-BoldMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /NBIAAA+TimesNewRomanPS-BoldMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-558 -328 2000 1056} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 4685 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB
222483BD74F8B> |
91 <001C60D8A8C9B7A73DB9D68E3C59A537D4244B74F90AE5CF41C7B4A2C7BC
A7A300F542CA93A2965E2AB86F9584D924C16737BF4180B7DA4B7375C292CAA9
5A0E3B2594252BA96E488864DADCA2044CBA91A0274761964E2F75E7C5D311CC
85FA3455FCD6989CD236F854D42654F054105B8E0A503E8AA280D5C605BAE218
5D188946DF0290DADBD2E70C64DD6894FEC8D24D6C9DAF05913AB860A656821A
51421A29E857B8FCAFC52BB43B89323BB040408BE2C54B02756FD8F29437E2C5
6AEA7FFF343CA63AC2EF68BA76DF88EA86E6216CF5E0E5EA45C5BAFB0EDA849E
2779> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /NBIAAA+TimesNewRomanPS-BoldMT-Identity-H /Identity-H 0 [/NBIAAA+TimesNewRomanPS-BoldMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/REFKNI+TimesNewRomanPS-BoldMT /NBIAAA+TimesNewRomanPS-BoldMT-Identity-H findfont ct_VMDictPut
REFKNI+TimesNewRomanPS-BoldMT [0 -12.0164 -12.0164 0 0 0 ]msf
103.8 274.797 mo
(\000[)sh
156.897 480.491 mo
156.897 453.919 li
.92929 .879301 .889677 .799283 cmyk
@
153.673 454.749 mo
156.897 445.028 li
160.169 454.749 li
153.673 454.749 li
ef
171.355 479.368 mo
171.355 455.335 li
@
168.132 456.166 mo
171.355 446.445 li
174.628 456.166 li
168.132 456.166 li
ef
213.608 479.368 mo
213.608 453.919 li
@
210.335 454.749 mo
213.608 445.028 li
216.832 454.749 li
210.335 454.749 li
ef
193.483 466.033 mo
192.555 466.033 191.773 466.863 191.773 467.889 cv
191.773 468.866 192.555 469.696 193.483 469.696 cv
194.411 469.696 195.193 468.866 195.193 467.889 cv
195.193 466.863 194.411 466.033 193.483 466.033 cv
ef
193.483 466.033 mo
192.555 466.033 191.773 466.863 191.773 467.889 cv
191.773 468.866 192.555 469.696 193.483 469.696 cv
194.411 469.696 195.193 468.866 195.193 467.889 cv
195.193 466.863 194.411 466.033 193.483 466.033 cv
cp
@
199.687 466.033 mo
198.759 466.033 198.026 466.863 198.026 467.889 cv
198.026 468.866 198.759 469.696 199.687 469.696 cv
200.664 469.696 201.396 468.866 201.396 467.889 cv
201.396 466.863 200.664 466.033 199.687 466.033 cv
ef
199.687 466.033 mo
198.759 466.033 198.026 466.863 198.026 467.889 cv
198.026 468.866 198.759 469.696 199.687 469.696 cv
200.664 469.696 201.396 468.866 201.396 467.889 cv
201.396 466.863 200.664 466.033 199.687 466.033 cv
cp
@
206.232 466.033 mo
205.304 466.033 204.523 466.863 204.523 467.889 cv
204.523 468.866 205.304 469.696 206.232 469.696 cv
207.16 469.696 207.942 468.866 207.942 467.889 cv
207.942 466.863 207.16 466.033 206.232 466.033 cv
ef
206.232 466.033 mo
205.304 466.033 204.523 466.863 204.523 467.889 cv
204.523 468.866 205.304 469.696 206.232 469.696 cv
207.16 469.696 207.942 468.866 207.942 467.889 cv
207.942 466.863 207.16 466.033 206.232 466.033 cv
cp
@
171.062 391.785 mo
171.062 349.581 li
@
167.838 350.363 mo
171.062 340.642 li
174.335 350.363 li
167.838 350.363 li
ef
185.277 392.616 mo
185.277 350.265 li
@
182.004 351.047 mo
185.277 341.326 li
188.501 351.047 li
182.004 351.047 li
ef
213.608 392.616 mo
213.608 350.265 li
@
210.335 351.047 mo
213.608 341.326 li
216.832 351.047 li
210.335 351.047 li
ef
194.02 381.039 mo
193.092 381.039 192.36 381.82 192.36 382.846 cv
192.36 383.872 193.092 384.702 194.02 384.702 cv
194.997 384.702 195.73 383.872 195.73 382.846 cv
195.73 381.82 194.997 381.039 194.02 381.039 cv
ef
194.02 381.039 mo
193.092 381.039 192.36 381.82 192.36 382.846 cv
192.36 383.872 193.092 384.702 194.02 384.702 cv
194.997 384.702 195.73 383.872 195.73 382.846 cv
195.73 381.82 194.997 381.039 194.02 381.039 cv
cp
@
200.273 381.039 mo
199.345 381.039 198.563 381.82 198.563 382.846 cv
198.563 383.872 199.345 384.702 200.273 384.702 cv
201.201 384.702 201.983 383.872 201.983 382.846 cv
201.983 381.82 201.201 381.039 200.273 381.039 cv
ef
200.273 381.039 mo
199.345 381.039 198.563 381.82 198.563 382.846 cv
198.563 383.872 199.345 384.702 200.273 384.702 cv
201.201 384.702 201.983 383.872 201.983 382.846 cv
201.983 381.82 201.201 381.039 200.273 381.039 cv
cp
@
206.77 381.039 mo
205.841 381.039 205.109 381.82 205.109 382.846 cv
205.109 383.872 205.841 384.702 206.77 384.702 cv
207.746 384.702 208.479 383.872 208.479 382.846 cv
208.479 381.82 207.746 381.039 206.77 381.039 cv
ef
206.77 381.039 mo
205.841 381.039 205.109 381.82 205.109 382.846 cv
205.109 383.872 205.841 384.702 206.77 384.702 cv
207.746 384.702 208.479 383.872 208.479 382.846 cv
208.479 381.82 207.746 381.039 206.77 381.039 cv
cp
@
[.71968 1.43936 ] 0 dsh
185.277 361.158 mo
163.344 361.158 145.564 364.675 145.564 368.974 cv
145.564 373.272 163.344 376.74 185.277 376.74 cv
207.16 376.74 224.941 373.272 224.941 368.974 cv
224.941 364.675 207.16 361.158 185.277 361.158 cv
cp
.437324 .904234 1 .107881 cmyk
@
184.544 461.05 mo
164.615 461.05 148.397 463.786 148.397 467.107 cv
148.397 470.429 164.615 473.115 184.544 473.115 cv
204.523 473.115 220.691 470.429 220.691 467.107 cv
220.691 463.786 204.523 461.05 184.544 461.05 cv
cp
@
[] 0 dsh
241.939 288.913 mo
241.939 246.123 li
.92929 .879301 .889677 .799283 cmyk
@
224.941 253.206 mo
224.941 239.04 li
232.023 246.123 li
224.941 253.206 li
.0704356 0 .894438 0 cmyk
ef
224.941 253.206 mo
224.941 239.04 li
232.023 246.123 li
224.941 253.206 li
cp
.92929 .879301 .889677 .799283 cmyk
@
[.71968 1.43936 ] 0 dsh
179.611 266.053 mo
141.266 266.053 110.199 269.57 110.199 273.868 cv
110.199 278.167 141.266 281.635 179.611 281.635 cv
217.955 281.635 249.071 278.167 249.071 273.868 cv
249.071 269.57 217.955 266.053 179.611 266.053 cv
cp
.437324 .904234 1 .107881 cmyk
@
[] 0 dsh
166.862 246.416 mo
156.946 246.416 li
.92929 .879301 .889677 .799283 cmyk
@
166.862 289.206 mo
166.862 246.416 li
@
149.863 253.499 mo
149.863 239.334 li
156.946 246.416 li
149.863 253.499 li
.0704356 0 .894438 0 cmyk
ef
149.863 253.499 mo
149.863 239.334 li
156.946 246.416 li
149.863 253.499 li
cp
.92929 .879301 .889677 .799283 cmyk
@
121.483 246.123 mo
111.567 246.123 li
@
121.483 288.913 mo
121.483 246.123 li
@
104.484 253.206 mo
104.484 239.04 li
111.567 246.123 li
104.484 253.206 li
.0704356 0 .894438 0 cmyk
ef
104.484 253.206 mo
104.484 239.04 li
111.567 246.123 li
104.484 253.206 li
cp
.92929 .879301 .889677 .799283 cmyk
@
192.067 267.665 mo
191.138 267.665 190.357 268.495 190.357 269.521 cv
190.357 270.547 191.138 271.328 192.067 271.328 cv
192.995 271.328 193.776 270.547 193.776 269.521 cv
193.776 268.495 192.995 267.665 192.067 267.665 cv
ef
192.067 267.665 mo
191.138 267.665 190.357 268.495 190.357 269.521 cv
190.357 270.547 191.138 271.328 192.067 271.328 cv
192.995 271.328 193.776 270.547 193.776 269.521 cv
193.776 268.495 192.995 267.665 192.067 267.665 cv
cp
@
198.27 267.665 mo
197.342 267.665 196.609 268.495 196.609 269.521 cv
196.609 270.547 197.342 271.328 198.27 271.328 cv
199.247 271.328 199.98 270.547 199.98 269.521 cv
199.98 268.495 199.247 267.665 198.27 267.665 cv
ef
198.27 267.665 mo
197.342 267.665 196.609 268.495 196.609 269.521 cv
196.609 270.547 197.342 271.328 198.27 271.328 cv
199.247 271.328 199.98 270.547 199.98 269.521 cv
199.98 268.495 199.247 267.665 198.27 267.665 cv
cp
@
204.816 267.665 mo
203.888 267.665 203.106 268.495 203.106 269.521 cv
203.106 270.547 203.888 271.328 204.816 271.328 cv
205.744 271.328 206.525 270.547 206.525 269.521 cv
206.525 268.495 205.744 267.665 204.816 267.665 cv
ef
204.816 267.665 mo
203.888 267.665 203.106 268.495 203.106 269.521 cv
203.106 270.547 203.888 271.328 204.816 271.328 cv
205.744 271.328 206.525 270.547 206.525 269.521 cv
206.525 268.495 205.744 267.665 204.816 267.665 cv
cp
@
185.961 244.56 mo
185.033 244.56 184.251 245.391 184.251 246.416 cv
184.251 247.442 185.033 248.273 185.961 248.273 cv
186.889 248.273 187.67 247.442 187.67 246.416 cv
187.67 245.391 186.889 244.56 185.961 244.56 cv
ef
[.71968 1.43936 ] 0 dsh
185.961 244.56 mo
185.033 244.56 184.251 245.391 184.251 246.416 cv
184.251 247.442 185.033 248.273 185.961 248.273 cv
186.889 248.273 187.67 247.442 187.67 246.416 cv
187.67 245.391 186.889 244.56 185.961 244.56 cv
cp
@
192.213 244.56 mo
191.236 244.56 190.503 245.391 190.503 246.416 cv
190.503 247.442 191.236 248.273 192.213 248.273 cv
193.141 248.273 193.874 247.442 193.874 246.416 cv
193.874 245.391 193.141 244.56 192.213 244.56 cv
ef
192.213 244.56 mo
191.236 244.56 190.503 245.391 190.503 246.416 cv
190.503 247.442 191.236 248.273 192.213 248.273 cv
193.141 248.273 193.874 247.442 193.874 246.416 cv
193.874 245.391 193.141 244.56 192.213 244.56 cv
cp
@
198.71 244.56 mo
197.782 244.56 197 245.391 197 246.416 cv
197 247.442 197.782 248.273 198.71 248.273 cv
199.638 248.273 200.419 247.442 200.419 246.416 cv
200.419 245.391 199.638 244.56 198.71 244.56 cv
ef
198.71 244.56 mo
197.782 244.56 197 245.391 197 246.416 cv
197 247.442 197.782 248.273 198.71 248.273 cv
199.638 248.273 200.419 247.442 200.419 246.416 cv
200.419 245.391 199.638 244.56 198.71 244.56 cv
cp
@
38.5892 119.316 mo
139.263 119.316 li
139.263 66.9035 li
38.5892 66.9035 li
cp
0 0 0 0 cmyk
f
[] 0 dsh
38.5892 119.316 mo
139.263 119.316 li
139.263 66.9034 li
38.5892 66.9034 li
cp
.92929 .879301 .889677 .799283 cmyk
@
139.263 119.316 mo
cp
@
1 /12 /CSD get_res sepcs
1 sep
REFKNH+TimesNewRomanPSMT [0 -12.0164 -12.0164 0 0 0 ]msf
66.0412 111.745 mo
(\000$\000Q\000D\000O\000R\000J\000\003)
[-8.66632 -5.99866 -5.32574 -3.33099 -5.99872 -5.99866 0 ]ysh
80.4489 114.389 mo
(\000'\000H\000F\000R\000G\000H\000U)
[-8.66504 -5.32446 -5.32446 -5.99738 -5.99738 -5.32446 0 ]ysh
133.597 161.96 mo
123.681 161.96 li
.92929 .879301 .889677 .799283 cmyk
@
133.597 119.17 mo
133.597 161.96 li
@
116.598 154.877 mo
116.598 169.043 li
123.681 161.96 li
116.598 154.877 li
.0704356 0 .894438 0 cmyk
ef
116.598 154.877 mo
116.598 169.043 li
123.681 161.96 li
116.598 154.877 li
cp
.92929 .879301 .889677 .799283 cmyk
@
[.71968 1.43936 ] 0 dsh
88.2177 146.817 mo
58.4699 146.817 34.3395 143.3 34.3395 139.002 cv
34.3395 134.703 58.4699 131.235 88.2177 131.235 cv
117.966 131.235 142.096 134.703 142.096 139.002 cv
142.096 143.3 117.966 146.817 88.2177 146.817 cv
cp
.437324 .904234 1 .107881 cmyk
@
[] 0 dsh
45.7697 162.546 mo
35.8049 162.546 li
.92929 .879301 .889677 .799283 cmyk
@
45.7697 119.756 mo
45.7697 162.546 li
@
28.7221 155.463 mo
28.7221 169.629 li
35.8049 162.546 li
28.7221 155.463 li
.0704356 0 .894438 0 cmyk
ef
28.7221 155.463 mo
28.7221 169.629 li
35.8049 162.546 li
28.7221 155.463 li
cp
.92929 .879301 .889677 .799283 cmyk
@
63.0127 140.858 mo
62.0846 140.858 61.3519 140.027 61.3519 139.002 cv
61.3519 138.025 62.0846 137.194 63.0127 137.194 cv
63.9896 137.194 64.7223 138.025 64.7223 139.002 cv
64.7223 140.027 63.9896 140.858 63.0127 140.858 cv
ef
63.0127 140.858 mo
62.0846 140.858 61.3519 140.027 61.3519 139.002 cv
61.3519 138.025 62.0846 137.194 63.0127 137.194 cv
63.9896 137.194 64.7223 138.025 64.7223 139.002 cv
64.7223 140.027 63.9896 140.858 63.0127 140.858 cv
cp
@
69.2651 140.858 mo
68.337 140.858 67.5555 140.027 67.5555 139.002 cv
67.5555 138.025 68.337 137.194 69.2651 137.194 cv
70.1932 137.194 70.9748 138.025 70.9748 139.002 cv
70.9748 140.027 70.1932 140.858 69.2651 140.858 cv
ef
69.2651 140.858 mo
68.337 140.858 67.5555 140.027 67.5555 139.002 cv
67.5555 138.025 68.337 137.194 69.2651 137.194 cv
70.1932 137.194 70.9748 138.025 70.9748 139.002 cv
70.9748 140.027 70.1932 140.858 69.2651 140.858 cv
cp
@
75.7618 140.858 mo
74.8337 140.858 74.101 140.027 74.101 139.002 cv
74.101 138.025 74.8337 137.194 75.7618 137.194 cv
76.7387 137.194 77.4714 138.025 77.4714 139.002 cv
77.4714 140.027 76.7387 140.858 75.7618 140.858 cv
ef
75.7618 140.858 mo
74.8337 140.858 74.101 140.027 74.101 139.002 cv
74.101 138.025 74.8337 137.194 75.7618 137.194 cv
76.7387 137.194 77.4714 138.025 77.4714 139.002 cv
77.4714 140.027 76.7387 140.858 75.7618 140.858 cv
cp
@
91.0997 162.546 mo
81.1838 162.546 li
@
91.0997 119.756 mo
91.0997 162.546 li
@
74.101 155.463 mo
74.101 169.629 li
81.1838 162.546 li
74.101 155.463 li
.0704356 0 .894438 0 cmyk
ef
74.101 155.463 mo
74.101 169.629 li
81.1838 162.546 li
74.101 155.463 li
cp
.92929 .879301 .889677 .799283 cmyk
@
91.0997 66.9034 mo
91.0997 41.2099 li
@
87.827 41.9915 mo
91.0997 32.3198 li
94.3236 41.9915 li
87.827 41.9915 li
ef
[.71968 1.43936 ] 0 dsh
224.941 239.04 mo
37.1237 172.608 li
@
36.8307 175.93 mo
28.7221 169.629 li
38.9799 169.824 li
36.8307 175.93 li
ef
1 /12 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FLDBAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/FLDBAA+TimesNewRomanPSMT 7 GetGlyphDirectory
55 <001C60D8A8C9B7D8BE514ED6977CE9F9E5860FEBB6D8EBF5879FDED6C1E4
8F6AFEEE7B65DB6C9D492058CAA103CB13A7A80B0015E85F272BB9775991CD97
556EC3CFB46A4E1606F006216EABEB711074247C72C159202F32CC7F5F403FAE
58110685510DDB32C57700D5067C975D7063A496FE85C1E5> |
86 <001C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC2
2ACE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A
039A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF
40BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359
FAAB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C5
93B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF50
9B93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |
80 <001C60D8A8C9B6FF86F5D75501F5946D14C10E01941D6F8F408CE1116793
2D24264D7EFCAC2AE86125FDD757A8758D869BC4213413CCB2A6A255440BA181
6E9DC45844CC319542821B45F7B81EE7391A0EDD08008613940B7EF538F41747
A2556BE4D609FA0E86A3720064373B35B3C09F29E00670FDA88D75DD91439C68
FD574D15688B76675600DF49F10BE44872E462D2FA9EDC453EEFA6E997D8F249
107C6F71C5B180EF91CFB08123DB5F12D5248BB769BCDBF86D09B3C1EE1D61D1
8CE6632A82186FF826CE8FF5C9F24094455D2446DAB1258D7CEF6AB64018AE95
5617323D2765A0C9FC9EE9EFC157214A4EF1A088A6CBE09BD12BF0618C85527D
987ABAA0F84BBDB3F467CD6D1AFC5F01D6CD6E91196626F968CD9EC222C872FA
FEC679ED97966B06F7D45253DA82AACAAC774A43132A3F4B4FB40FD07B5AFDAE
82B335C3B8E42DF7C6FCB1E78E5819FAE1E5B06EBADF2F71F0A59372AEE76B51
7996> |
75 <001C60D8A8C9B7A73DB904DA2C7A38531EB5E07DB80E9375E00037710435
E027FD1F7B471BB2C47AEA703B8CB5C9C005CAA0B77F572194961F7C30413194
A0134D3FF9BA81F629AD195D96BD3C1285904670FEB33C334E260F33EE9AB1A2
D9C0C66E38CE4D3CA583879DAF16CE988CC2A14E39FED6599F4B0F3F8F061B58
5E2410824AE8C179E66BD3AD9F6E34CD8CBF79298E3E4553D0E9DCA292805DED
8E36C58209B17E38B2DFAFEB881CA5FB9EC7A76A0CF0C4BFE83CE749EBD15B15
E97FBEA4E90F2186A54E69C28F4083AB76DBE019E4C57B27760FED872C448379
6F735A795EACD82F245D81FB43B5> |
20 <001C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |
16 <001C60D8A8C9B81F2C797FA61189B8881D0DB497EEC4F8> |
56 <001C60D8A8C9B6079F6D024388243061A610EA3A6326F33263CDE8BCFFE9
F148F3D7F4C9725D2BAF9A3232BD1EB145B5A77D8B0651FBD8E8A9FB06CCD2A8
CC2722C436D9102F6A183E894B34B7045CE7C217957AA9B87F4515C93092C441
847223DE93B9E3D8ECF6C02AE8C75FDAA89CB34F7A7CE8EBAED7CDD0E6765B39
52A1A95E2E1735ECFE4DF6802DC3188EE398A9F5CCD7DB8E0B3AB2D84DF5AF6C
30AB040D323559946C1407613CE0866FB1002EF0B5DF66414A685DAD87F9D351
3811F878AD> |
!
end
end end
%ADOEndSubsetFont
REFKNH+TimesNewRomanPSMT [0 -12.0164 -12.0164 0 0 0 ]msf
108.196 478.831 mo
(\0007\000U\000D\000Q\000V\000P\000L\000W\000W\000H\000U)
[-7.3335 -3.99295 -5.32684 -5.99976 -4.66605 -9.3403 -3.33215 -3.33209 -3.33215 -5.32684 0 ]ysh
26.4727 125.464 mo
(\0007\000K\000H\000\003\000\024\000\020\000V\000W\000\003\0008\000V\000H\000U)
[-7.35147 -5.95886 -5.34482 -3.01364 -5.95886 -4.00507 -4.68402 -3.35004 -3.01367 -8.68536 -4.63837 -5.32574 
0 ]ysh
147.127 541.99 mo
226.162 541.99 li
226.162 480.687 li
147.127 480.687 li
cp
0 0 0 0 cmyk
f
.841797 lw
[] 0 dsh
147.127 541.99 mo
226.162 541.99 li
226.162 480.687 li
147.127 480.687 li
cp
.92929 .879301 .889677 .799283 cmyk
@
226.162 541.99 mo
cp
@
1 /12 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FLDBAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/FLDBAA+TimesNewRomanPSMT 3 GetGlyphDirectory
37 <001C60D8A8C9B64EDFFBC13662E45548907DF94CFDD8366168A19798D3F9
4023374D4D2C86938E32D7DB9C1872F3A204253AB72EA5DE94FC03994C8EF8A3
AEA69543654A5C81A183CE8AEAD100B0BA927EF2453AE33B886ED98847317AAC
2483A7B07D884E6BA01DCB84EDD0DBB4BCDE82582971377C63466C51717F481B
412F62082ABE2DA40B3D1CD64A6F92915DAB718445366AAC40CD207CDC2AEAFB
F75F78F4F875F819FE068F712E647D09F9C9585654CB217F940FB0CC4A0399BD
16E20306B0AE361121402EB02A27DB6252E098ADE7CC6B62128FF27D9B35E955
978F8F1CC87FEE6B14877366567A52B860F7D53BC608D1A75802EE31B412> |
54 <001C60D8A8C9B7EF32243DA21D5631D8766D74D715030BA7905332A0CFAC
49387DB487F69FE973B04989A1F5B84226AC0574A3AC8A92A20A67AC6A93CF1F
8D7D050DEAAE8CF31B4A5FB504F0A0814E8C9022E7C7EFFB00070B62EB780F5B
FD7AC1407620155D4B738E953EA9E8519FCB3635DEED6C82D9AB968BE1131CEE
B6B072A246B745E2E47F0890CD4A4DD5061C30741173A5782D0F5AE0E6453375
18CA765AC1ABF9ABB13F9D6F8666630C08F558B2481DB7C0FEA08930FF35DE90
4907DBC222EF06C7863FAB3917A57116C566327E1977A70091D7628A2440BE3A
B444BD01341C54F829742469A9B1CF3048C0B204E355F432B93B12EA12C84F80
CE13D22435E5FCC1B5A000DE> |
88 <001C60D8A8C9B7A73DB9860E0681DA8AEA1E5FBC1C72A452614FEB33CC58
A199CCF544A550BDEE35652D618DE4A02AA9CF0753ADA232102DC8DC25CB9581
52D1B74BC447B68C074C25C2126470565A20B42A419CDD0C7A1DA63C6A764D55
5B867A9BE961ADBD0AF5B2007F47FCC9435F8B51D3F3A5D83941DD57A0C4D32E
169A6BACC26F8AD3C9372F1114911D1D3F3FB2725FADBF9F529AA2CFB178B79F
97520325221F3417C7781EB09765> |
!
end
end end
%ADOEndSubsetFont
REFKNH+TimesNewRomanPSMT [0 -12.0164 -12.0164 0 0 0 ]msf
167.252 535.982 mo
(\0008\000V\000H\000U\000\003\000%\000H\000D\000P\000\003)
[-8.66632 -4.66492 -5.32581 -3.99182 -2.99457 -8.00549 -5.32574 -5.32574 -9.33923 0 ]ysh
181.612 536.126 mo
(\0006\000F\000K\000H\000G\000X\000O\000L\000Q\000J)
[-6.67157 -5.32574 -5.99866 -5.32574 -5.99869 -5.99869 -3.33099 -3.33102 -5.99869 0 ]ysh
.71968 lw
[.71968 1.43936 ] 0 dsh
104.484 239.04 mo
35.3164 175.637 li
.92929 .879301 .889677 .799283 cmyk
@
33.7045 178.568 mo
28.7221 169.629 li
38.1007 173.781 li
33.7045 178.568 li
ef
149.863 239.334 mo
36.4399 174.074 li
@
35.5607 177.298 mo
28.7221 169.629 li
38.7846 171.68 li
35.5607 177.298 li
ef
104.484 239.04 mo
77.6668 177.786 li
@
75.0291 179.838 mo
74.101 169.629 li
80.9395 177.2 li
75.0291 179.838 li
ef
149.863 239.334 mo
80.6464 175.637 li
@
79.0345 178.568 mo
74.101 169.629 li
83.4307 173.83 li
79.0345 178.568 li
ef
224.941 239.04 mo
82.1607 173.341 li
@
81.5746 176.614 mo
74.101 169.629 li
84.2611 170.752 li
81.5746 176.614 li
ef
195.925 153.607 mo
343.297 153.607 li
343.297 11.9506 li
195.925 11.9506 li
cp
0 0 0 0 cmyk
f
1.19919 lw
[8.39681 5.9976 ] 0 dsh
343.297 153.607 mo
343.297 11.9506 li
195.925 11.9506 li
195.925 153.607 li
343.297 153.607 li
cp
.437324 .904234 1 .107881 cmyk
@
222.791 119.268 mo
323.465 119.268 li
323.465 66.8546 li
222.791 66.8546 li
cp
0 0 0 0 cmyk
f
.71968 lw
[] 0 dsh
222.791 119.267 mo
323.465 119.267 li
323.465 66.8546 li
222.791 66.8546 li
cp
.92929 .879301 .889677 .799283 cmyk
@
323.465 119.267 mo
cp
@
1 /12 /CSD get_res sepcs
1 sep
REFKNH+TimesNewRomanPSMT [0 -12.0164 -12.0164 0 0 0 ]msf
250.243 111.647 mo
(\000$\000Q\000D\000O\000R\000J\000\003)
[-8.66742 -5.99976 -5.32684 -3.33215 -5.99976 -5.99976 0 ]ysh
264.651 114.339 mo
(\000'\000H\000F\000R\000G\000H\000U)
[-8.66504 -5.32443 -5.32446 -5.99738 -5.99744 -5.32446 0 ]ysh
317.799 161.911 mo
307.883 161.911 li
.92929 .879301 .889677 .799283 cmyk
@
317.799 119.121 mo
317.799 161.911 li
@
[.71968 1.43936 ] 0 dsh
272.42 146.768 mo
242.623 146.768 218.542 143.251 218.542 138.953 cv
218.542 134.654 242.623 131.186 272.42 131.186 cv
302.168 131.186 326.298 134.654 326.298 138.953 cv
326.298 143.251 302.168 146.768 272.42 146.768 cv
cp
.437324 .904234 1 .107881 cmyk
@
[] 0 dsh
229.923 162.497 mo
220.007 162.497 li
.92929 .879301 .889677 .799283 cmyk
@
229.923 119.707 mo
229.923 162.497 li
@
247.215 140.809 mo
246.287 140.809 245.505 139.979 245.505 138.953 cv
245.505 137.927 246.287 137.146 247.215 137.146 cv
248.143 137.146 248.925 137.927 248.925 138.953 cv
248.925 139.979 248.143 140.809 247.215 140.809 cv
ef
247.215 140.809 mo
246.287 140.809 245.505 139.979 245.505 138.953 cv
245.505 137.927 246.287 137.146 247.215 137.146 cv
248.143 137.146 248.925 137.927 248.925 138.953 cv
248.925 139.979 248.143 140.809 247.215 140.809 cv
cp
@
253.467 140.809 mo
252.539 140.809 251.758 139.979 251.758 138.953 cv
251.758 137.927 252.539 137.146 253.467 137.146 cv
254.395 137.146 255.177 137.927 255.177 138.953 cv
255.177 139.979 254.395 140.809 253.467 140.809 cv
ef
253.467 140.809 mo
252.539 140.809 251.758 139.979 251.758 138.953 cv
251.758 137.927 252.539 137.146 253.467 137.146 cv
254.395 137.146 255.177 137.927 255.177 138.953 cv
255.177 139.979 254.395 140.809 253.467 140.809 cv
cp
@
259.964 140.809 mo
259.036 140.809 258.254 139.979 258.254 138.953 cv
258.254 137.927 259.036 137.146 259.964 137.146 cv
260.892 137.146 261.674 137.927 261.674 138.953 cv
261.674 139.979 260.892 140.809 259.964 140.809 cv
ef
259.964 140.809 mo
259.036 140.809 258.254 139.979 258.254 138.953 cv
258.254 137.927 259.036 137.146 259.964 137.146 cv
260.892 137.146 261.674 137.927 261.674 138.953 cv
261.674 139.979 260.892 140.809 259.964 140.809 cv
cp
@
275.253 162.497 mo
265.337 162.497 li
@
275.253 119.707 mo
275.253 162.497 li
@
275.253 66.8546 mo
275.253 41.1611 li
@
272.029 41.9426 mo
275.253 32.222 li
278.526 41.9426 li
272.029 41.9426 li
ef
1 /12 /CSD get_res sepcs
1 sep
REFKNH+TimesNewRomanPSMT [0 -12.0164 -12.0164 0 0 0 ]msf
210.677 124.787 mo
(\0007\000K\000H\000\003)
[-7.3335 -5.99976 -5.32687 0 ]ysh
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT Initial
ct_T42Dict begin
-0.496 -0.305 1.332 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /TimesNewRomanPS-ItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32f728b780000000cc000000606376
742008fab09e0000012c0000079c6670676d4d5f5868000008c800000634
676c7966fe6c3e9b0000bdb8000a9f6868656164e77d958500000efc0000
0036686865610e31116000000f3400000024686d747898a212d600000f58
000037e86c6f636147ffa80600004740000037ec6d617870139404140000
7f2c000000206e616d6509c1dde900007f4c0000334f70726570ab1cb91f
0000b29c00000b1b67646972000000000000000000000000000303370190
00050008059a0533002c0125059a0533004c03a000660212010502020503
050405090304e0000eff4000785b0000000100000000544d432000010020
fffc058efe460133072101bb400001bfdff700000371054c000000200008
058e0000054c001f054c001c037100180000ffe10000ffe80000ffe8fe4a
fffc056b0023fe68ffe2033e000000950000009500000000000000000025
00a8008e010b007d00820045003200a400ca006b0070005100af003c00f0
01d700470004002500770029004000fd00160161004601370029008e0017
ffca0025005bffe902e600020099008100f2007500d6006300c60006009a
01330024003800cc003dff67001305d8003600860095ffdb0007043400a5
00d8ffdcfffe004800a200d8013c01530380053e0057007a007c008c0117
012a0138017c0026003c007800bd00c0021009b5000c004d004e00540058
006700b4040100020005005000af01d5034300240058008b013501c0ffac
002000250026002d00410136022bffba001e002a0034003b003f00850094
009800d7012e013d033104b900170040006100b9010e0116012201bfff9c
001f001f004d005c0086008c009600aa00cb00cb011f0154022f036005a9
fee8000e006f007c007d008b00d500f1010a0157017802b803adfe3fff6a
ffb3ffc4001f0037003f0044004a0078007d009700a200a700b600c000c1
00c600d8011d0150019701ee04740532fd81fed1fee0ff16fff1000f002d
00550068006e007f00890095009e00c200da00e400f801040108011101c2
023002da030e049e0517ff00ff8700000020002f00410057007800870088
008800b900c200c5012001280133017401d6020e020f026c027e02ab02ec
038903b103e304e7ff43ffa8ffc3ffdcffe9000700230023002600520077
007d0081008f009900ac00ae00b500b800c800ea00f000f40135016a018b
01b101b501f7021402ad02d504fc05d805f0ff9dfffc000b00240025002c
0030003000330040004700490057006e009a00bd00c900cd00dc00fa00fa
011b0139017e0187018a018e0195019601df01f6028602cf02de039603a9
03b003c804010432046a058b05e006510761fe96fe9aff4bff8700130025
00340038003e004a0065006b0073007a009c00a200b200b700bf00f000f7
00fb0104011301200124013b01520178017c0181018f01a001d90248026a
026f02700301031d032303270388041f04ab04d104da057a058bfe26fe59
ff2e00010002000a003b003b004700580058005f0066006b007a007a008b
009900af00bc00c000c700cc00e900f200f500fb00fb0102010a010b0115
0121012701450145015501570158015e01610168017d01a301ab01da01ee
021002180222028f029402a302d202e703710393039b03b303d303fe04ff
050b05320532054b0559058b05ab05f2065506890742076207a708ccfd2a
fdc8fddefe0cfe15fe27fe53fe84febbff58ff76ff77ffa1ffa7ffadffaf
ffc00000000000030094001d001f002000200027002e0048004b004c005e
005f006b0071007c008a00900091009100a700af00b300b400c400c600d1
00d200de00df00df00e600e800ea00eb00f200f500f500fc010201180123
013101330137015c016201660170017a017a017a018201980199019b01b0
01bf01c001ca01d301d701d801e001e001f601f701f802120213022f0237
02440247024f0252026302650270027f0298029b02a602b702ba02c502cf
02d602d702e502fe031c031d03450348035d035e03710379038103a103b7
03d403d503d803e103f803fe0404041f042104230425043a0467048304e0
0528054b0564056a059f059f05c2060b066a06af06b306cb06e807060728
0748075007a607b207ff009500af00920096000000000000000000000000
017e01a80129025b0212020301c302b4019301cd02b204ed020e0159017a
0300022d042c00c8004d00e602890325013e0378011b00f1018d00490203
007c000e029d02470024000000000052004400330038005405d3041501a7
000002860168005000cf0002004b0024008800ba0025ffd800110091ff6b
00b5011700260065ff9900490080014b01c000f40167027102ea04fc0310
017c01e103d9015501e601ee0434019606cb005c022b0099003d009f0016
0039002700de00790120022e005a00990388009400210019002a046c05e8
000001f203b200aa0296028902b4ffc9020000ec0005005a0447010004e0
0000052a001f01eb00ae016800ca02d3028901b5040601a1014f014b011c
0308005e00c70024029d006503750104028002f304d800d90239025a032c
01f204310303005002e50283005901eb010800ac019602f8012100950180
004400e501eb02e5007400f301ff02fd038f026801c801c70116022b0142
033000fe02e101620200002400ee05170108023700660006010201e602aa
0366019b00d305c203dc044d03b6000401be013702fc03200244014d0338
ffed002506f8030dfed5ff43004402ffff92040bfdef0155017100d9ffc4
032d0461044afbb5fbcf02170192036d0558fff2fe7d0583023e006605e9
073d00790243002500cf00fd00af002a01ef021a0026001f0025003a0000
01170490fbfb0251001d02f001f50078018f005f00240044005400bf00af
006701a8002600050006003f009800fa02ab00c2004d0375004a00b600c4
01bf017c006f00130263000c006801520002012e0104001f001f009a0000
00f1046900790080005000bd056b00ab0080001e05a5fe4000ce006e0056
004800db018b00b3004802390458005300820082002203d703f104704042
5554403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524
232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706
0504030201002c4523466020b02660b004262348482d2c452346236120b0
2661b004262348482d2c45234660b0206120b04660b004262348482d2c45
23462361b0206020b02661b02061b004262348482d2c45234660b0406120
b06660b004262348482d2c4523462361b0406020b02661b04061b0042623
48482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d
44235920b0ed51582320b04d44235920b09051582320b00d44235921212d
2c20204518684420b001602045b04676688a4560442d2c01b10b0a432343
650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b102
17453ab10200080d2d2c45b01a234445b01923442d2c2045b00325456164
b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b0
004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a
8cb8100062602b0c642364615c58b00361592d2c45b0112bb0172344b017
7ae4182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b017
7ae41b038a45186920b01723448a8a8720b0a05158b0112bb0172344b017
7ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c482d2c01
182f2d2c20b0032545b019234445b01a23444565234520b00325606a20b0
09234223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a
54582321b03f1b235961441cb114008a5279b31940201945208a54582321
b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d
4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1101143
2343650b2d2c4b525845441b2121592d2c0120b003252349b04060b02063
20b000525823b002253823b002256538008a63381b212121212159012d2c
4bb06451584569b00943608a103a1b212121592d2c01b005251023208af5
00b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b006
2510f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c
2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76
b802ee23701020b802ee4520b0005058b00161593a2f182d2c21210c6423
648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b0
02602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c
0c6423648bb84000626023212d2cb4000100000015b00826b00826b00826
b008260f10161345683ab001162d2cb4000100000015b00826b00826b008
26b008260f1016134568653ab001162d2c4b53234b515a5820458a60441b
2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121
592d2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03
592d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425
060c6423646164b807085158b00425b00425012046b01060482046b01060
48590a21211b2121592d2cb012435c580cb00425b00425060c6423646164
b807085158b00425b00425012046b8fff060482046b8fff06048590a2121
1b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b0
3b2b1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a03
4b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c462346608a
8a462320468a608a61b8ff8062232010238ab903b003b08a70456020b000
5058b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b1230188
51b1400188535a58b910000020885458b202010243604259b12401885158
b920000040885458b2020202436042b12401885458b2022002436042004b
014b5258b2020802436042591bb940000080885458b202040243604259b9
4000008063b80100885458b202080243604259b94000010063b802008854
58b202100243604259b12601885158b94000020063b80400885458b20240
0243604259b94000040063b80800885458b202800243604259b128018851
58b94000080063b81000885458ba00020100000243604259595959595959
2d2cb0024354584b53234b515a58381b2121591b21212121592d00010000
00070000ec5cb64b5f0f3cf50819080000000000a31fb8bd00000000d67a
920dfc05fd8c0aaa0830000200090001000100000000000100000721fe45
00570ab9fc05fa500aaa001800070000000000000000000000000dfa0639
011c00000000020000000200000002aa009a035c01260400009304000056
06aa00900639006201b6010d02aa008c02aaff2104000122056600be0200
ffeb02aa0036020000450239ffbb0400007a0400007d0400002004000044
040000400400004904000081040000e80400004e0400003b02aa007a02aa
002405660096056600c805660096040000c6075c006104e3ff9c04e3ffd1
0556008a05c7ffc304e3ffd204e3ffce05c7008e05c7ffca02aaffc0038d
ffba0556ffc90473ffbe06aaffbd0556ffc705c7007a04e3ffcf05c70061
04e3ffd10400000e0473008f05c700da04e3010006aa00f904e3ff770473
00b80473fffc031d000d023900da031dff33036000380400ffef02aa0168
0400003004000036038d003804000027038d00400239fe9b0400ffc90400
0029023900580239fea0038d00140239004f05c70023040000270400003c
0400ff1e0400002d031d002a031dffed023900540400003c038d002c0556
0023038dffb8038dff5c031dffc70333008d023300ed0333ff6704540014
04e3ff9c04e3ff9e0556008a04e3ffd20556ffc705c7007a05c700da0400
00300400003004000030040000300400003004000030038d003c038d0040
038d0040038d0040038d0040023900580239005802390058023900580400
00270400003c0400003c0400003c0400003c0400003c0400003c0400003c
0400003c0400003c040000dd033300d404000072040000310400fffc02cd
00ad042f006c0400feb70614008b0614008b07d700be02aa019902aa010c
04640019071dff9405c7004805b40035046400350464005e0464005a0400
fff2049cffd203f4004005b4002b069600920464004802310000023500b2
027b00e40625005b0556002d0400000504000049031d0090056600960464
0054040000020464001e04e5ffc40400005404000025071d010a04e3ff9c
04e3ff9c05c7007a078d002d055600360400ffee071dffed0473018a0473
017502aa01b202aa01910464003503f4002f038dff60047300b70156feab
0400001102aa007402aa002e0400fe7d0400fe7d0400ffe3020000d202aa
00410473001e0800007f04e3ff9c04e3ffd204e3ff9c04e3ffd204e3ffd2
02aaffc002aaffc002aaffc002aaffc005c7007a05c7007a05c7007a05c7
00da05c700da05c700da0239005802aa00fe02aa00c602aa00f602aa0126
02aa01c102aa017d02aaffdb02aa012f02aa001102aa01520473ffc60239
00330400000e031dfff00473fffc031dffc7023300ed05c7ffd004000037
047300b7038dff6004e3ffcf0400ff1e056600960566017a026600a30266
006f02660084060000a1060000a1060000820400ffce05c7008e0400ffc9
02aaffc00400000e031dffed0556008a038d003c0556008a038d003c0400
0027040000c502ab01ee04e3ff9c0400003004e3ff9c0400003005c7ffc3
04de002705c7ffd004e3ffd2038d004004e3ffd2038d00400473ffbe0239
004f0473ffbe02e9004e0473ffbe029500490556ffc7040000270556ffc7
0400002705c7007a0400003c04e3ffd1031d002a04e3ffd1031d002a0400
000e031dffed0473008f0239ffbd0473008f02e9005605c700da0400003c
05c700da0400003c0473fffc031dffc70473fffc031dffc7048dffb605c7
007d0617009d0433003c03b800300327001603f2003602dd0033046d004a
0400ffef0495009a0285001407eb002f0800004f040000990800004f0400
00990800004f040000980400009807d5016a05c700c0056600c604cd0099
0566009804d5022204d5010505abffe904ed01c005ab027e05abffe905ab
027e05abffe905ab027e05abffe905abffe905abffe905abffe905abffe9
05ab01c005ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
027e05ab01c005ab01c005abffe905abffe905abffe905ab027e05ab01c0
05ab01c005abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905ab02d605ab006605abffea05d5ffff04d500920800
000007eb013007eb012007eb013007eb012004d500b204d5008004d5002a
082b0198086b01b807550010060000f40600006f0440003a0540003704c0
003f0415004004000025060000550600ffc30401004b049e007301c0010d
0355012606ab006c0355001e04d5009202d6008302d6008304d500b202d6
007004e3ff9c040000300556008a038d003a0556008a038d003a04e3ffd2
038d004004e3ffd2038d004004e3ffd2038d004005c7008e0400ffc905c7
008e0400ffc905c7008e0400ffc805c7ffca0400002905c7ffca04000029
02aaffc00239005402aaffc00239005802aaffc00239005402aaffc00239
ffc6038dffba0239fea00556ffc9038d0014038d00140473ffbe0239ffb6
0556ffc7040000270592ffc003db002705c7007a0400003c05c7007a0400
003c04e3ffd1031dff980400000e031dffed04730093023a003105c700da
0400003c05c700da0400003c05c700da0400003c05c700da0400003c06aa
00f905560023047300b8038dff5e0239fe9d04e3ffa504000030071dff94
0556002d05c700480400000502aa014d06aa00f90556002306aa00f90556
002306aa00f905560023047300b8038dff5e02aa01bd02aa00b704000031
04cd005a060000a10600008206000084060000e802aa004c02aaffdb02aa
019902aa00b404e3ff9c056f005d065600590337004d05c7007a0548005e
05cf00200239005404e3ff9c04e3ffd104b2ffa704e3ffd20473fffc05c7
ffca02aaffc00556ffc904d5ff8f06aaffbd0556ffc7051dfff205c7007a
05c7ffc504e3ffcf04c1ffb90473008f047300b804e3ff7705a0011305c9
001b02aaffc0047300bc0433003c0327001603f8003a0239005503ac0035
03fcff7703270031033d002f03f8003a03ee005a0239005503d7001f0377
ffc00404ff94038d002c036d00250400003c03d7ff6f033f003f03ac0035
0385ff4004f8008f05a600480239005503ac00350400003c03ac00350595
003f04e3ffce066000c1048dffb6055a008e0400000e02aaffc002aaffc0
038dffba076bffbb075effc2066400c60550ffc7056200e105c7ffcd04e3
ff9c04b8ffc604e3ffd1048dffb60517ff2d04e3ffd20754ff9003f6fffe
05c7ffcc05c7ffcc0550ffc7056bffb906aaffbd05c7ffca05c7007a05c7
ffc504e3ffcf0556008a0473008f056200e1066f009504e3ff7705c7ffcc
058300e70858ffe40858ffe40568007606faffc604b8ffc6053d001e0842
ffbe0542ff9104000030040600490379003f031f0002040c003d038d0040
0771ffff031fffce0400003c0400003c03be0025037dffa5051bffa403f8
00290400003c040000270400ff1e038d003805c70023038dff5c05ae003c
038dffb80400003c03d10056060a0040060a00400427003c056b006603a4
00660387000f05a4002a03b8ff84038d003c03d500280304ffaa037d0036
031dffed02390058023900550239fea0056fffa605b2002a0400002903be
0025038dff5c040000250385ffc30285005608000041078bffa804020032
0000fefb0000ff3a0000ff380000ff380000ff3a0000ff3a0000ff3a0000
ff380000ff38000000770000ff3a000000f70000feb502f700c00000fff3
02aa005f0000037a0000003602aa007a03d3ffd5037fffc50291ff7e0357
00bd03ceffd1021c00bf0208002903c4fffa03d3005901ef00c6038000c1
0349ffc7037000c703c8ffe403c3ffde020b004a023cff9d03b1006b0383
ffcd0372004f036effd5039000c50397fff0038eff8f039500bc04f500c2
03cbff85043800bf040b00c603de00c60186009b02f1009b064c0010021c
00bf038000c10380009c0370000a0370000a0383ffd104f500c204f500c2
04f500c204f500c203d3ffd503d3ffd503d3ffd5037fffc50291ff7e0357
00bd03ceffd1021c00670225000303d3005901ef0067038000c10349ffc7
037000c703c3ffde023cff9d03b1006b0372004f036effd50397fff0038e
ff8f039500bc04f500c203cbff85021c00bf037fffc50349ffc7036effd5
0448004a0000ffdc0000ff250000ffdc0000fe510400005a0800000005c7
007a0445003c060800da045d003c0000ff1a0000fdf20000fdb40000ff91
0000fef60000fee40000ff780000ff8a0000fe880000fefb0000fea20000
fe6e0000fdf4000000350000001f0000fe47041a0078060000a10600006f
0000ff2b0000fe6c0000fe8a0000fdd20000ff1e0000fe380000fdcd0000
fd190000fce70000fd710000fd3f0000fcf90000fccd0000fc050000fc05
0000fc550000fc0f0000ff190000ffa20000fe310000fc550000fcef0000
fd9c0000fdda0000fca10000fd530000fcef0000fcb30000fd0d0000fcb3
0000fdba0000fd940000fd7e0000fd300239005804e3ff9c0400003004e3
ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c04000030
04e3ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c0400
003004e3ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ffd2
038d004004e3ffd2038d004004e3ffd2038d004004e3ffd2038d004004e3
ffd2038d004004e3ffd2038d004004e3ffd2038d004004e3ffd2038d0040
02aaffc00239005802aaffc00239003105c7007a0400003c05c7007a0400
003c05c7007a0400003c05c7007a0400003c05c7007a0400003c05c7007a
0400003c05c7007a0400003c05c7007a0445003c05c7007a0445003c05c7
007a0445003c05c7007a0445003c05c7007a0445003c05c700da0400003c
05c700da0400003c060800da045d003c060800da045d003c060800da045d
003c060800da045d003c060800da045d003c047300b8038dff5c047300b8
038dff5c047300b8038dff5c04e3ff9c0400003002aaffc00239005805c7
007a0400003c05c700da0400003c05c700da0400003c05c700da0400003c
05c700da0400003c05c700da0400003c000000be000000be000000be0000
00be048dffb6031f00020754ff900771ffff0550ffc703be00250550ffc7
03be002505c7ffca03f80029047300b804000003047300b80400ffdf04e3
ff77038dffb8058300e703d100560583ffca04000029058f007a038d001b
05c7007a0400003c01ef00b70000ffd50336ffea03de006204000036054b
003904b8ffc60400003604b8ffc604000036055600330556008a038d0038
05c7ffd0063d003904b800260400002703b8000804e3ffe603f6003b04e3
fecd05c7008e05a30100060e00290239004f02aaffc00556ffc9038d0014
0239004a0377ffc0064500870556fecd03f8003a05c7007a0766008e0568
003c054d00390400ff1e04e3ffcf04000013031d001604c1ffb90222004f
0239ff5e0473008f02390054047300cd05c9007a056f00da049d00dd0416
ff5c0473fffc031dffc70453ff5d0453ffdd038dffad038dfff004000020
03b200490311ffb30296ffed042eff1e019a00a1023f00a101fe000a02aa
009a0a3affc308e4ffc3071d00270800ffbe06acffbe0472004f08e6ffc7
078fffc706390027038d001b04e3ff9c04000030000000f304e3ff9c0400
0030071dff940556002d05c7008e0400ff6d05c7008e0400ffc90556ffc9
038d001405c7007a0400003c05c7007a0400003c0453ff5d038dff6a0239
fea00a3affc308e4ffc3071d002705c7008e0400ffc90794ffca04c7ff41
0556ffc70400002704e3ff9c0400003004e3ff9c0400003004e3ffd2038d
004004e3ffd2038d004002aaffc00239002102aaffc00239005805c7007a
0400003c05c7007a0400003c04e3ffd1031d002a04e3ffd1031d002a05c7
00da0400003c05c700da0400003c0400000e031dffed0473008f0239ffd4
04f2ff940321ff4905c7ffca040000290546ffc404e50033045100500473
fffc031dffc704e3ff9c0400003004e3ffd2038d004005c7007a0400003c
000000b305c7007a0400003c05c7007a0400003c05c7007a0400003c0473
00b8038dff6003890048040000300400003004000036038d0011038dffb6
0400002704000027038dffdf04bd001b03270016031fffce0467ffce03bf
003a0239fea00400ffcd0400ffcd03f5003c03cf005803a700750400003c
04000029040000290239000b023900580226ffc6023900460239004f0239
0006046b004805c7003c05c7003c05c700230400fe8404000027040fffe8
0400003c0563003c05a600480456003c031dffdc031dffdc031dffdc031d
ffab031dfffc02df002702df0091038effc603d6ffc6031dffa8024bfea0
024bfea002040014024bfec80239fff702390006040000070429003d03eb
0035038d001205560013038d001203050038031dffc7031dffc7038dff6a
038dffbe034a0007034a007c034a00000389ffe905c7007a0370ffc603bf
000603f5003c0418ffc60239fe9c038dffbd031effc60400002d034a0007
034a007c060c0027065c0027060a0027047b005a0395ffea051d005405cf
fe9b045c004f041a004f041d004603d9ffc00245006f0245006f0151ffa9
01c7006f01c7003d01c7003d02470040031d0081020a000801b6010d035c
012602aa01b202aa019102aa01bd02aa01dd02aa01dd022d00cb022d00e2
0566002705660025056600c4056600c402aa020702aa019902aa016802aa
00a302aaff5902aaffff02aafff6023900610239013302aa00f702aa00f7
02aa00a602aa00a602aa00a602aa000802aa0003030e0105025700aa0117
006f01b000560242005a022d00e203100096031000960310009603100096
0310009602aa006202aa006202aaffbe02aa00ae04730175045700960457
009604570096045700960457004304570043045700430457004304570043
031000430457002f0457002f0457002f0457002f0457002f0310002f0457
0025045700250457002504570025045700250310002f0457001a0457001a
0457001a0457001a0457001a0310001a0457004204570042045700420457
004204570042031000420457009604570096045700960457009604570042
04570042045700420457004204570042031000420457002f0457002f0457
002f0457002f0457002f0310002f0457002f0457002f0457002f0457002f
0457002f0310002f04570026045700260457002604570026045700260310
002604570042045700420457004204570042045700420310004204570096
045700960457009604570096045700420457004204570042045700420457
004203100042045700260457002604570026045700260457002603100026
0457002304570023045700230457002304570023031000230457002f0457
002f0457002f0457002f0457002f0310002f0457004b0457004b0457004b
0457004b0457004b0310004b045700960457009604570096045700960457
004204570042045700420457004204570042031000420457001a0457001a
0457001a0457001a0457001a0310001a0457002404570024045700240457
002404570024031000240457002f0457002f0457002f0457002f0457002f
0310002f0457004e0457004e0457004e0457004e0457004e0310004e0457
00960457009604570096045700960000ff9a0000ff890000fef40000ffe8
000000720000ffcf0000001b0000fffd000000090000008f0000001f0000
ff6a0000ffe80000ffe8000000500000002a00000074000000e80000fec0
0000fea30000fea30000fea30000ff7a000000ad0000feed0000fea30000
fea30000fea30000fdfd0000fe5f0000ffd40000fe370000fea60000fe9a
0000fe8b0000ff380000ff3b0000fdfa0000fe2c0000fe7e0000fde70000
fe570000fdfd0000fe0c0000fe0a0000fd250000fe2f0000fefe0000fee5
0000fe170000fefa0000fe910000feed0000fdfa0000fead0000fe1c0000
ffe5000000650000fef40000fff00000004f0000ff990000002a0000ff55
0000fef80000ff5c0000fd180000fec00000fea30000ff9a0000ffcf0000
ff8d0000fe060000fea30000fd1f00000046000000460000ff530000ff6b
0000ff750000ffff0000ff5b0000ff600000ff740000ff6a0000ff5a0000
fece0000ff9a0000fffa0000ff770000ff4302aa019902aaff9b02aa0041
03fc003d03ed0000051700b506120064051700b50424003c05a6001f047f
000305c7007a0400002d055600a0038e002c04e3ffce03b5ffa70422004d
039c002d059d00b6042d00a10645fffd05c7fff704a5007a042700970630
ffca037effa3045600320456003204f6ffed04320048059b007603f5003c
0322fffc02b6000c047f0003040f00070391003c0239fea405c7007a0339
003c0339ffa104e3ffd205c7ffcc038d00400400003c0916007a0517009b
056600740556002707b2ffc00564ffc60593ff8f0456ff960827ffc00640
ffc606d9ff740516ff840981ffc00714ffc603f6ff56031fff2d05a000db
04f8007005c7007a0400003c055c01000471002c055c01000471002c08dd
007a071b003c06420052049c00280916007a0676003c0000fe370916007a
0517009b0556008a038d0038023cffbb0000ff760000ffae000000640000
003c0000fc2b0000fc4c05c7ffcc0400003c04b8ffc603a4006604e3ffcf
0400ff1e0516ffb6038effaa03f6fffe031fffa40550ffc703be002505ff
00760438003c06f2ffca04fa00290822ffc5058700270556008e038d003a
0556008a038dfff40473009005c7002305c7ffcc0400003c058300e703d1
005606840040045f000106840040045f000102aaffc00754ff900771ffff
0550ffc703be0010056bffb9037dffa505c7ffca03f8ffbc05c7ffca03f8
0029058300e703d1005606aaffbd051bffa4044801cd04e3ff9c04000030
04e3ff9c04000030071dff940556002d04e3ffd2038d0040058f007a038d
001b0754ff900771ffff03f6fffe031fffce03f6fffe038dff6a05c7ffcc
0400003c05c7ffcc0400003c05c7007a0400003c05c7007a0400003c053d
001e0387000f056200e1038dff60056200e1038dff60056200e1038dff60
058300e703d1005606faffc6056b006604b80047040000270669004705a2
0027063700ea052d0082042800ea031f0082073affb90526ffa50794ffca
0590002905c7008e03f5003c056e00cd075a00230000fe2a000000030000
002400000073000000000000fe3e000000630000ffb80000ff730000ff84
0000fe4f000000110000010e0000ffb70000ff35000000020000000d0000
fe6a0000fe8a0000fe400000fde00000fe7900000063000000240000fe55
0000005a0000002d0000ff380000fec00000006500000042000000a30000
00a3000000b3000000b3000001440000010d000000a304e3ff9c04000030
04e3ffd10400003604e3ffd10400003604e3ffd1040000210556008a038d
003c05c7ffc30400002705c7ffc30400002705c7ffc30400000d05c7ffc3
0400002705c7ffc30400000304e3ffd2038d004004e3ffd2038d004004e3
ffd2038dffc704e3ffd2038d000004e3ffd2038d004004e3ffce0239fe9b
05c7008e0400ffc905c7ffca0400002905c7ffca0400002905c7ffca0400
002905c7ffca0400ff9f05c7ffca0400002902aaff880239ff7402aaffc0
023900580556ffc9038d00140556ffc9038d00140556ffc9038d00140473
ffbe023900130473ffbe023900130473ffbe0239ff4f0473ffbe0239feff
06aaffbd05c7002306aaffbd05c7002306aaffbd05c700230556ffc70400
00270556ffc7040000270556ffc70400fff90556ffc70400000305c7007a
0400003c05c7007a0400003c05c7007a0400003c05c7007a0400003c04e3
ffcf0400ff1e04e3ffcf0400ff1e04e3ffd1031d002a04e3ffd1031d002a
04e3ffd1031d002a04e3ffd1031dff090400000e031dffed0400000e031d
ffed0400000e031dffed0400000e031dffed0400000e031dffed0473008f
023900540473008f02390013047300350239ff59047300170239fef505c7
00da0400003c05c700da0400002805c700da0400000305c700da0400003c
05c700da0400003c04e30100038d002c04e300b3038d002c06aa00f90556
002306aa00f90556002304e3ff77038dffb804e3ff77038dffb8047300b8
038dff600473fffc031dffc70473fffc031dffc70473fffc031dff810400
ffe50239005405560023038dff60040000300239fe9d0433003c0433003c
0433003c0433003c0433003c0433003c0433003c0433003c04e3ff9c04e3
ff9c054700000547000004e3ff9c04e3ff9c04e3ff9c04e3ff9c03270016
032700160327001603270016032700160327001605ab008d05ab009a06d7
007f06d700b906d7007f06d700b903f8003a03f8003a03f8003a03f8003a
03f8003a03f8003a03f8003a03f8003a068f008d068f009207bb007f07bb
00b907bb007f07bb00b907bb00d007bb00d0023900580239005802390043
02390058023900580239005802390058023900580372008803720088049e
007f049e00b9049e007f049e00b9049e00d0049e00d00400003c0400003c
0400003c0400003c0400003c0400003c068f00c9068f00f507bb007f07bb
00b906f3007f06f300b903ac003503ac003503ac003503ac003503ac0035
03ac003503ac003503ac0035053b009106cb00b906cb00b906cb00d005a6
004805a6004805a6004805a6004805a6004805a6004805a6004805a60048
069100c9069100e307bd007f07bd00b906f5007f06f500b906f500d006f5
00d00433003c0433003c032700160327001603f8003a03f8003a02390058
023900580400003c0400003c03ac003503ac003505a6004805a600480433
003c0433003c0433003c0433003c0433003c0433003c0433003c0433003c
04e3ff9c04e3ff9c054700000547000004e3ff9c04e3ff9c04e3ff9c04e3
ff9c03f8fffb03f8fffb03f8fffb03f8fffb03f8fffb03f8fffb03f8fffb
03f8fffb068f008d068f009207bb007f07bb00b907bb007f07bb00b907bb
00d007bb00d005a6004805a6004805a6004805a6004805a6004805a60048
05a6004805a60048069100c9069100e307bd007f07bd00b906f5007f06f5
00b906f500d006f500d00433003c0433003c0433003c0433003c0433003c
0433003c0433003c04e3ff9c04e3ff9c04e3ff9c04e3ff9c04e3ff9c02aa
019102aa004102aa019102aa00c602aa010c03f8fffb03f8fffb03f8fffb
03f8003a03f8fffb060f00fe060f00d106f300f606f300d105c7ffca02aa
00e302aa00e302aa013402390058023900580239003c0239003c02390058
0239005802aaffc002aaffc003d600ec03d600d102aa011d02aa011d02aa
013403ac003503ac003503ac003503ac003503d7ff6f03d7ff6f03ac0035
03ac0035047300b8047300b806030104060300d105ab009702aa00b402aa
00b402aa016805a6004805a6004805a6004805a6004805a6004806f30104
05c7007a06f5010405c9001b05c9001b02aa019902aa01bd04ef00ba0556
008a0556008a05c700230556ffc70871ffd106aa00590556ffc90473008f
0800ffbe0400ffad04c10066000000460000004600000046000000460239
000b0239fea00400ffc404e3ffcf040000270239ff40040000270239ffb6
044affe3044affe302aafffd02aafffe02aa002402aa003402aa000202aa
009502aa001402aa002102aaff6c02aa00ff02aa019f02aa019102aa000a
02aaffef032effa6032effa402aaffb000000033000000680000ffb60000
fea60000feed0000fee70000fe1a0000006800000046000000460000fe0a
04e3ffcf0400ff1e0330ff900491ff900556002d0343ffc7039d003c0411
ffc60411ffc6031fffc6031fffce023900090307002a03abffc60332ffda
04ccffda040bffc60400003c03c8003c042a003c042a003c0497003c0556
00360385003c03ee003c03ee003c0346ffc603efffc603370014030a0044
03ec00840471006a057d008004ef00b7035e008c049e008c0337fff102d1
ffdc033600000466ffba032dffc60331ff900403ffc60346ffc603f60092
03a2ffbc0354006304940063035b0089035a008903d60089034100890341
008f03a400de02dbfffa0217008902b900a803f200830332008204880084
03ac008a03f3008503cd00de02b200ad031f0082037b0084031700f203fe
0138048b014d033000e7033000e7033000e7032800850227006a027b0089
021900870219008601e4007801e40070024900350144005b0240006f0356
006e022a006e0249007b0214007202490083024900780243ffda01580098
02580085028b009103720085023d008a02d900690246000301d80080023b
00830271007d0227fff80144000a01f8ffe20258ffe9023dfffc0246ff72
01d8ffe00246ffc90271ffdc0227ff5d0509ffd5048300bd04faffd10475
ffc7049c00c704f4ffe404cb00bc04f7ff85048300250000ff3a0000ff38
0000ff380400ffee0473018a035c00db0400000008000000040000000800
000002ab000002000000015500000400000002000000019a000000ab0000
000000000556008a06aaffbd04ccff5f05cf003c060500270608002d04e3
ff9c0556008a040000720473ffbe0473ffa5031dffed031d000403e50061
000001cf0000feb60000fe140000003c0000ffcb03d7ff340556008a0556
008a0556008a048dffb6031f00020000fe54000000770000fee40270ffd3
0000ff3804000036040000270239fe9b05c7000b040000140400fefa031d
ffae02dfff9f031dffed0239ffcf031dffc70400ff750258002803c5ffaa
059affc30226ffc60239000b0400ff1e03ec00290429ffe3040000360400
002702d6fe9b04bbffc9038d00140239ffac05c70023040000270400ff1e
031dff1a031dffed02d1fea0038d002c038dffb8031dffc7040000300400
003004000027038d004003270016031fff65038d001b02390058038dffa6
024bfec40400003c038dffad033000e7021a007b021a002f0252007b01e4
00700164ff960164ffaf0288007b0258008d0144006b0144009301440048
014400480144ff970144006b0144002b01c5002c032b0065032b0072022a
ff61022a006f022a00340249007a027b007b01cf00310164ff9c01580001
0258006a0262007b025800aa02580083023d008101ef005601ef0057021b
005601effff2024900910000ff510000ff540000fee10000ffa002aa007a
0257ffed0219ffe30249ffe50246ffcb0219ffe005c7008e04e3ff9c0400
00130556008a02aaffed0433003c0433003c0433003c0433003c0433003c
0433003c0433003c0433003c023900580239005802390058023900580239
005802390058023900580239005803ac003503ac003503ac003503ac0035
03ac003503ac003503ac003503ac00350239005802390058023900580239
005803ac003503ac003503ac003503ac0035037d003804e3ffd105c70066
04d5ff8f04e3ffd2038d0040038dffba0239fea005aa008e0400002d04e3
ffd1031d0015047300a2038dff5c039100140391003c039100140239004f
048dffb6031f000204e3ff77038dffb804e3ff77038dffb803f6003b037d
0017056bffb9037dffa50000ffbe0000ffb50000ffdc0000ff950000ff54
0000ff330000febc000000500000fe1a070e0020031fffde039100140473
ffbe023900350473ffbe04e3ffcf04e3004c040000300239ff9005c7ffca
040000290556ffc9038d00140473fffc031dffc7038d003a04ccffca0345
0029046d004a0000006a000000a6000000270000000a0000ffa70000fe6e
023900580592ffc00556ffc70592006e0000fecc0000ff1c0000fee20000
fef70000fedd0000fee60000fec50000fefa0000fee50000fec50000feb2
05c700610400002d06aa00f9055600230579ffb10000ff8305be007a0474
002c06aa00f90665002302aa00b0033d007701b600a201b600f004000099
0400009902aa018102aa017b02aa010a02aaff7404730077040000910400
005a02f2001e03df001103cfffe60400001703aeffd504180084040000b4
0400006b04180036043900970323001404000020039f00260400004003c0
00290400008103b800be0400004e0400003b023900580471fe980695fea9
0692feab0435fe9c068afea903c9ff8803e2ffbc0434004e04a8ffbc03a9
ffbc036cffbc0476004e04c7ffbc0257ffbc0298ffc30462ffbc038affbc
0533ffbe049affc70476004903b3ffbc04760048040affbc0334fffe03a8
006f049b009603c3007605dc008b0405ff9903f6008b0405ffc90548ffa6
05dc0049038affbc0476ffe703b3ffbc04a8ffbc0466ffb003c9ff8803c9
ff8803c9ff8803c9ff8803c9ff8803c9ff880434004e03a9ffbc03a9ffbc
03a9ffbc03a9ffbc0257ffbc0257ffbc0257ffbc0257ffbc049affc70476
004904760049047600490476004904760049049b0096049b0096049b0096
049b009603f6008b03c9ff8803c9ff8803c9ff880434004e0434004e0434
004e0434004e04a8ffbc04a8ffbc03a9ffbc03a9ffbc03a9ffbc03a9ffbc
03a9ffbc03a9ffbc0476004e0476004e0476004e04c7ffbc0476004e04ac
ffbc0257ffbc0257ffbc0257ffbc0257ff8f0257ffbc04b2ffbc0298ffc3
0462ffbc038affbc038affbc038affbc038affbc049affc7049affc7049a
ffc7047effbc047600490476004904760049040affbc040affbc040affbc
0334fffe0334fffe0334fffe0334fffe0334fffe03a8006403a8006f03a8
006f03b20079049b0096049b0096049b0096049b0096049b0096049b0096
05dc008b05dc008b05dc008b05dc008b03f6008b03f6008b03f6008b0405
ffc90405ffc90405ffc903c9ff880548ffa60476ffe703c9ff8803e2ffbc
0356ffbc03d7ffb403a9ffbc0405ffc904c7ffbc047600480257ffbc0462
ffbc0414ffab0533ffbe049affc703e3ffd00476004904c1ffb603b3ffbc
03b3ffbf03a8006f03f6008b047f00350405ff9904a400bd048dffc503c9
ff8803a9ffbc04c7ffbc0257ffbc04760049048dffc503f6008b0257ffbc
03f6008b03a9ffbc04c200720356ffbc0437004e0334fffe0257ffbc0257
ffbc0298ffc305a3ffad05c8ffbc04ba0069044affbe0435005504c8ffbe
03c9ff8803cbffba03e2ffbc0356ffbc045cff4d03a9ffbc05b0ffa5035c
ffe804c6ffbe04c6ffbe044affbe045bffad0533ffbe04c7ffbc04760049
04c1ffb603b3ffbc0434004e03a8006f04350055048600350405ff9904c9
ffb6044c00a5068dffcd0694ffcd0491007905b1ffba03ccffba04370013
0659ffbc0437ff890356ffbc02560056025600850256004a025600540256
00480256004a02560052025600a60256004c025600560256005602560085
0256004a02560054025600480256004a02560052025600a60256004c0256
005604cf003007bdffc407bdffc407bdffc407bdffc407bdffc407bdffc4
07bdffc406b4003c0513007a0513007a0749003c06ad003c06ad003c06ad
003c06ad003c06ad003c0664003c05cb008d0794ffc40487003c0487003c
0487003c0487003c0487003c048effc40723003c050dffe7050dffe709d7
ffc407bcffc407bcffc405a7007905a7007905a7007905a7007905a70079
05a70079062b0054062b00540672003c05c7007d06e6003c043dffb5043d
ffb505a2003c06eb003c06eb003c06eb003c06eb003c06eb003c0612003c
0811003c0673ffc404ad007c04ad007c04ad007c04d9fff104d9fff10759
005e07bdffc407bdffc407bdffc40513007a0513007a0513007a0513007a
0749003c06ad003c06ad003c06ad003c06ad003c06ad003c05cb008d05cb
008d05cb008d05cb008d0794ffc40794ffc40487003c0487003c0487003c
0487003c0487003c048effc40723003c050dffe7050dffe7050dffe7050d
ffe707bcffc407bcffc407bcffc405a7007905a7007905a7007906e6003c
06e6003c06e6003c043dffb5043dffb50400000e0400000e05a2003c05a2
003c05a2003c05a2003c06eb003c06eb003c06eb003c06eb003c06eb003c
06eb003c0811003c0811003c0811003c0811003c04ad007c04ad007c04d9
fff104d9fff10723003c0774008f0884003c0428ffca031c003c0473008f
0423007b05c7006204400027052effc9040000c60400006b0400fffd07db
ffb90553ffa5074cffcf058fff1e0781ff910591ff840556ffc903d7001f
07f2ffb90504ffa5084cffca0577002905c7ffc5040000270583ffca0400
00270239fe9b0239fe9b03b800300688ffc00438004f046b007a03ae003c
04fdffce03bbfec306aaffbd04e3010a05be003704700040031dfff10400
003c031fffe60151fefa035e010b0400000e0473fffc0239ffc60400ffab
05c500d40590ffa605d400c405f30049058100d405c4002904faffb0059e
ffa60722ffa806170055054fffb00412ffb00770ffb005de0089059a00e4
04b7ffd005cf004d05c4004905c1002f068500d505aa007b05a200b90587
005e05b8ffa6059300cb06a4003f05b5001b0657ffa605b800d505e90053
052f005b0570ffa605860068047dffb5063f0088066f000605e800800679
00670199013201fe01430154008d00f7009001a8009201da0065047501d9
05c9003e03cfff200420003f03fe002903e800410416003d0339001803fa
ffaa0516ff200442004703fdff2001ffffae05f5ff2003fc004603c80047
03e7001703d7003a03fd002903d40039040c003b01d3fe8403e6004702e9
ff0d03fa00290239ff2c05b5003c037eff670438002903fa003b03f8003d
05e0003c03faff2003d1fff70287002d05c5003b042aff2a040d00400575
003704b100410239007a02f400bf077a0045077a00450616004907f2003b
07f4003b0809003b07de003d0a01003b0000fee40291ff7e035700bd03ce
ffd103cbff85000000770000ffc80400ffda038dffba05c7fec603f8fe84
0a39ff2d0843003d0597ffba0414ff74056bffb9037dffa5053600180542
ffc40437fe9b0538007102aa003602aa003602cd00e802fb010a050c010a
020000d20800000008000000080000000800000008000000080000000800
00000ab9007f01c001180355011a035c00be027fffbb0800018907a7ffab
07a70113027fffbb0783006c02aa002c031d000d031dff3306d000c60566
00c6061c009a040000b4042f00c803a0007003a0009a0400007302620024
07a7ffab040000d6040000790454001407a7ff98040000a30400007b0485
00db04ec0099051d00d202aa007a071000be051d00d202aa007a01c70000
000000000800000008000000080000000800000008000000080000000800
000008000000080000000800000008000000080000000800000008000000
06120040026600a6015600930266008302660084026600b5026600fc0266
009a026600b5026600ab026600ab026600ab019900540199ff7a02660011
026600260266fff30266000402660007026600020266001d0266006c0266
001102660023026600170266001702660017019900540199ff7a0245ffd6
0240ffd60117ffea0356ffd50245ffd60243ff4101b0ffbd015800000722
006c06d3006c0556005607d900a004e30054071b006c0402007e053d003a
073400a00414ffb9073fffe907e7007c05c7003104000027040000270581
ffca046d005305aa001c05f9003605c7fff10614008305ec006204730031
05c70056076a004b065c007c055600310556002704e3ffd107410048087a
008a04e3008c04e30021038dff6a05f2008205960039022700380556ffc9
04e3ff9c076a0091052b008b0314002b04ec0072058100020473ffcd08ec
0004033f003804bd00a7047a0067034d0047041f0084029d003e07ca0096
08d4003f046400480389000a04a0002f05c7002f05b40035063900b50473
0076047300760556000b05c7ffc304000027038d0040023900580239fea0
051500a9063900700637003e086affad060000a1060000a107c300a10600
00a10600006f0600008206000083060000a10600008403ab00a102aaffc0
0514ffc0077effc0075dffc004e301000774010009de01000a4600c40796
ffc004e3ff7707a0ff770a0aff770473ffbe0556008a05c7ffc306aaffbd
0239005804320058062b005805c20058038d002c05cc002c07c5002c09be
002c05cd0058038dffb805cbffb807c4ffb80239004f038d003804000027
05c7002308e5008a05c7ffc308e5008a0556003705dc008a0514002b05c7
ffc308e5008a060000a602aa010a02aa010a02aa010a02aa00dc02aa010a
02aa00dc036e00e0036e00e0035c00ca035c00ca035c00ca037e00ca037e
00ca037e00ca06b500320000fc050000fc050000fc0501e0ffb70400002e
04e8006004e80043056600960400008e0400006402aa003604540014037e
002a037e002a0454001404540014031d000d031d0030031d0115031d012e
031d000d031dff3305f4001405f4ffd6041b008c041bff20051d00d2051d
00d2051d00d204ec00990400014f02aa01b902d60082020000dc0200002c
020000910200003702aa007a040000dd040000eb0400fff4040000cf0800
ffed0800ffed020000000239ffca0239ffa50556008a02aa001602000045
04730081040000b8040000d40207ffe501bb005a020700f301bb012005c7
ffca03ba002905e7008f04cf005403f6003b03f6ffc3037b0038037bfff2
043500380435fff2036cffbc0334fffe07bdff9c054efff00865ff9c05c4
fff007d3ff9c056ffff006a1ff9c04bfffef06a1ff9c04bfffef06a1ff9c
04bfffef0556007c038dfffa0556ffc9038d00140556ffc9038d00140556
ffc9038d00140523006e026300e50473ffbe0239004f060900110400ffea
0631007a045f003c09f0007a069e003c04e3ffcf0400ff1e0547000404c2
ff6a067800ce05f4008a05c70061040000160680006104ad002d055800ba
03e900660518002003c7ffb604e30006038dff7306aa00f9055600230453
001b0408001b04e3ffcf0400ff1e04e3ffcf0400ff1e045eff440364ff44
0304ffda0304ff8a043affb1043aff380400003b0400ffd7025600680525
00270334005506ea002305280027036b002a0550ffbc0502005403b5ff9c
05c7007a040000370389ff2e02aaffad03c5001203c5ffc203c5ff720473
00c202390045058eff310400ffa90389ff2e02aaffad050f00760372003d
05c7012d03a400760556ffc7040000270556fff8038dffe2038d00380400
00290568000e04ffffc404e3fecd0239fe9b058b00640424000b05c70064
0400000b058b00640424000b05c7ffe60400ffc90556ffc9038dffbf0556
ffc70400ffdf04e3ffd1031dffc80400000e031dffed0635003803f6fffe
05befff504ff004a0556002d0473ffc7038d000d04e3fefc04e3ff3f03fc
ff770739005d05a6004805ec00330386003403c9007b05c7002304e300f4
04e3008e06aaffbd02aaff4308bcffd20431ffc5053cfff0031c0038038d
ffcf045fffee0239fe9b03d7ffb10286000e0239ffcd0239004805ae0023
03f4002703e1ffb1031effd7031effb00400000405c40036055600360556
0036069e003c069e003c03bbfff8040affbc028f002a0403002a03a0ffe5
0486ffe5032b003504ba0035024bfea00400003c0400000705c7002305c7
00230400003c0385ff400385ff40036dfea0038dffb8038dfe7d038dfe7d
038dfe69038dff5c02aa00900292005e01b2004201b200580288003e056b
003d0564ffc605e300380653003c04000042048dffc504e3ffd10473ff97
00>
<000000000000006800000068000000680000006800000116000001fe0000
040c0000065e000007ec0000099c00000a0e00000a8e00000b1600000ce8
00000d5c00000dd000000e0800000e5200000eb800000fbe000010ea0000
120200001356000014e6000016140000174c000018220000197600001ab2
00001b3600001be600001c9a00001cf400001db200001eec000021400000
23540000259a000026a40000281a00002a6c00002c4800002db6000030a2
0000329e00003406000036a80000383200003af400003ce800003e080000
3fbe00004196000043c0000045c0000047580000494800004b2200004dae
00004fda000051fc0000535e000054500000549c000055bc000056240000
565a000056ca0000594600005ac200005c4600005ebe0000603200006264
0000644c00006642000067e60000696000006bba00006d440000707e0000
72b2000073b8000075a6000077860000790400007a5400007bc000007e0a
00007f80000081800000835a0000851a0000871a0000881a000088560000
896400008a0c00008a4000008a8000008aae00008af600008b2e00008b60
00008b9800008bc800008bf800008c2800008c5a00008c8e00008cca0000
8cf800008d2600008d5a00008d8a00008dba00008dea00008e1a00008e56
00008e8600008ec000008ef000008f2000008f5000008f8400008fba0000
8fec0000901a0000904c0000907e000091b000009238000093b800009558
000096c600009734000097ea000099d600009be000009d8c0000a0340000
a0920000a1280000a20e0000a4ee0000a6ac0000a8060000a8a60000a9ae
0000aaa60000ad120000aeae0000afa60000b0de0000b1c40000b3660000
b47a0000b5de0000b6560000b7e00000b9c80000bb8a0000bc7c0000bd48
0000bd920000be380000bfec0000c1200000c1aa0000c28e0000c3680000
c4100000c4420000c4720000c4a20000c6f40000c8a80000c8de0000c916
0000c9f00000cac60000cb300000cba20000cc520000cd0c0000cd500000
cd8a0000cddc0000cf3c0000cf9e0000cffa0000d1fa0000d4020000d5d0
0000d6120000d6860000d75a0000d98a0000d9ba0000d9ee0000da1e0000
da520000da8e0000dac00000daf00000db2e0000db620000db920000dbcc
0000dbfc0000dc400000dc8a0000dcc00000ddb40000de240000debe0000
defc0000df780000dfc40000e0320000e0d80000e1740000e1e20000e252
0000e41e0000e57e0000e5b00000e5e00000e6120000e6440000e6a80000
e82c0000e9a00000e9d60000ea0a0000eba00000ed2a0000ed600000ee38
0000ef5e0000f0460000f1420000f3540000f59a0000f7e00000f9ac0000
f9dc0000fa0a0000fa440000fa720000fa9e0000face0000fafe0000fb38
0000fb720000fd580000fd920000fdd80000fe080000fe360000fe5c0000
fe820000feb20001008a0001009a000100c2000100e80001011c00010164
00010194000101c60001034600010486000104bc000104fe000105300001
056400010594000105d4000106220001066e0001069e000106d80001070a
0001074200010778000107b0000107d6000107fa00010840000109a80001
09dc00010a1a00010a6600010ab200010ae200010b1c00010b5400010b86
00010c9400010e520001105a00011182000112be00011416000114fa0001
15fe0001177a000117e40001180c0001195800011c6a00011ce200011d62
00011ddc00011e5800011efe00011fae00012088000120de0001218e0001
2218000122be0001230a0001238e00012412000124480001246400012484
000124a4000124c4000124e40001250a00012530000125560001257c0001
25ac000125d4000125fc000126260001265000012684000126ae000126da
00012710000127380001276400012798000127c2000127ec000128200001
284e00012882000128c4000128f4000129280001296a0001299e000129d0
00012a1200012a4600012a7600012ab800012afc00012b4200012b9e0001
2bba00012bd600012bf000012c0a00012c2400012d920001303c000132ac
000132c6000132e0000132fa00013316000133320001334e000133aa0001
33e40001344c00013524000135c8000136a000013720000137a800013816
000138ac0001390400013944000139a200013a0400013a4600013ac60001
3b0c00013b1c00013b2c00013ce800013e2400013e4e00013e6a00013e96
00013ece00013f1a00013f5e00013f9200013fc200013ff8000140280001
4056000140a0000140d200014102000141360001416c000141a4000141d8
0001420800014238000142660001428c000142be000142ee000143300001
461e00014818000148640001489a000148d8000149060001494c00014982
000149a6000149ca000149fe00014b4e00014b7400014b9800014d900001
4db600014ddc00014e0200014e2600014ff0000151da0001521000015240
00015274000152a4000152ca000152f00001532400015352000155340001
56f8000157380001576800015798000157d60001582a0001585a00015880
000158a6000158d600015906000159360001596400015a7200015ac20001
5af200015b2200015b5200015b8200015bb200015bfc00015c2c00015c5c
00015c8c00015cbc00015cf000015d2800015d5c00015d8a00015e100001
5e480001604e000161600001639400016588000167680001691000016974
00016a0c00016a1c00016ade00016cca00016ee80001710a000172320001
73280001757000017782000179060001791600017926000179f800017a08
00017a1800017a2800017a3800017a4800017b8200017b9200017ba20001
7dde00017dee00017f6a00017f7a000180d6000180e6000180f600018106
0001833a0001854200018576000185b4000185e400018612000186420001
8672000186b2000188140001893000018a6200018bf600018cfc00018d0c
00018ef20001901c0001916c0001917c0001930e0001931e0001944e0001
9570000196900001980000019a0a00019b6800019b9800019bec00019c1c
00019c5200019c8600019cba00019eda00019f0a0001a0120001a0220001
a0320001a0660001a0760001a26c0001a5320001a7440001a7740001a984
0001abfa0001ac0a0001ae260001ae360001ae460001afaa0001afba0001
b2da0001b4000001b6d00001b9fc0001bbba0001bd100001bd200001bd30
0001bd400001bd500001bd600001bd700001bd800001bef20001c1420001
c1520001c3a80001c5720001c7940001c9de0001cb280001cda80001cf72
0001d0b60001d3320001d4b60001d4c60001d60a0001d7200001d8120001
d8ec0001d8fc0001daec0001dc160001dc260001dece0001e05a0001e1d8
0001e3c60001e52c0001e53c0001e54c0001e55c0001e56c0001e57c0001
e58c0001e7b20001e7c20001ea400001eb960001edcc0001f0540001f1b8
0001f3cc0001f5280001f6320001f77c0001f9540001f9840001fafe0001
fc5c0001fd800001fd900001fda00001fdd00001fde00001ff4e0002013a
0002014a0002017a0002033200020540000206d2000207e80002081c0002
0a7600020c2200020c9e00020dc000020e5a00020f2800020f6e00020fe6
00021098000210c00002112a00021170000212240002126a000212940002
12bc000212e40002131e00021360000213a200021420000215ca000216ac
000217dc0002187e000219a400021a3800021ae200021c0000021d280002
1dd600021e7c00021f16000220360002211000022238000222e000022398
0002248c0002260e0002272a000228320002297400022ae400022c080002
2c9800022e6e00022f580002305e0002319a000232be000233400002341e
000235140002352c000235440002355c000235720002358e000237220002
373a000237520002377200023792000237aa000237c2000237da000237f0
000238060002381c000238340002384c000238640002387c000238940002
38aa000238c0000238d6000238ee000239060002391e000239360002394e
000239660002397e00023994000239ac000239c4000239dc000239f40002
3a0c00023a2400023c3600023c6000023d7a00023e2c00023ed60002401c
00024362000244f200024630000247fc00024a2800024aaa00024b000002
4b5800024bee00024c8200024cda00024d9c00024ea200024f600002502c
000250dc000251c20002525e00025322000253d600025416000255de0002
57bc00025964000259b800025a0c00025a6000025ab400025b5800025bf4
00025ca000025d4c00025df800025e8c00025f2000025fb400025fc60002
5fd800025fea00025ffc0002600e00026064000260bc0002615000026162
000261740002618600026196000261a8000261ba000261cc000261de0002
61f000026202000262e8000263940002647a000265260002662600026650
00026680000266b8000266e40002672c00026790000267ec000268360002
6888000268f60002694800026998000269da00026a2c00026a7a00026aba
00026b0c00026b5c00026ba600026bf000026c3000026c7400026cba0002
6d0200026d4200026d6800026da200026dd000026e0400026e5600026ebe
00026f1800026f7e00026fbe0002701a00027090000270ec000271320002
7198000271d6000272160002724e00027290000272cc000272f200027324
0002735c000273a2000274020002745e000274bc000274fe000275560002
75d40002762400027670000276b4000277000002773c00027776000277ae
000277de000278160002785c0002788c000278c6000278ec000279200002
795a00027980000279b6000279f000027a3000027a6800027aa000027af2
00027b2c00027b6000027ba400027bdc00027c1600027c3c00027c780002
7c9e00027ce600027d2c00027d6e00027dc600027e0c00027e5e00027e98
00027ee000027f1a00027f6c00027faa0002800e00028040000280f20002
8124000281ba000281ec00028288000282ba0002836e000284680002859a
000286f40002881a0002893600028a4400028cdc00028ef2000290c40002
927e0002947e0002969600029854000299b4000299c400029ae800029c50
00029dae00029f420002a0d20002a2940002a4400002a5760002a5860002
a68c0002a7620002a87a0002a9500002a9680002a9b60002a9de0002a9f4
0002ab7e0002ad260002aea80002afca0002b1020002b1fc0002b34e0002
b4a00002b5d60002b5e60002b7640002b8c80002ba2e0002bb800002bd00
0002be2a0002bf760002c0e40002c26a0002c3ee0002c3fe0002c5400002
c72a0002c8d40002ca060002cb580002cda40002cf020002d01a0002d02a
0002d1900002d2f80002d44e0002d5c40002d7620002d91a0002daac0002
dabc0002dba80002dd320002de3a0002df600002e0860002e25a0002e392
0002e4e80002e6300002e74a0002e85e0002e9800002ea860002eb8a0002
ecec0002edce0002eec00002efd40002f13e0002f2660002f28e0002f2ce
0002f3420002f3520002f3940002f3d60002f4180002f43e0002f4660002
f49a0002f4c20002f4ec0002f5280002f5fa0002f6240002f6740002f6dc
0002f7040002f7520002f7820002f7b20002f95e0002fba00002fbd00002
fbfe0002fc2e0002fc5e0002fc840002fcaa0002fcec0002fd2e0002fd5e
0002fd8c0002fed40002fefa0002ff200002ff460002ff760002ffa60003
01e0000303180003034800030376000303aa000303de0003040e0003043e
00030472000304a6000304d6000305060003053a0003056e0003059e0003
05ce00030602000306360003066600030696000306ca000306fe0003072e
0003075e00030792000307c6000307f6000308260003084c000308700003
0894000308b800030a4800030b7800030ba800030bd800030d3000030eb8
00030ff8000310c20003119e000311ce000311fe000314240003158c0003
15b600031608000316c4000316ec0003173e0003176e0003179e000317c6
000318140003184400031872000319d4000319e400031b2600031c600003
1d2800031e5200031fe00003217a00032268000323cc000324f60003262a
000327c8000328ee00032a1e00032bcc00032d2a00032e5e00032fd60003
30ec0003325e000333c00003353c000336d6000336e6000337ac0003393e
00033aae00033b8000033d4000033f80000341a4000343d8000345980003
473a000348d8000348e800034afc00034c4400034dee00034f2000035052
0003519e000352c60003544c000354cc00035564000356ce000358420003
5a1600035af000035c3400035d2800035e3800035f200003601200036216
0003634800036492000365b60003671200036874000369c000036ad40003
6bfe00036d0e00036e5800036fa0000370c0000371e8000372bc00037410
000375620003767e00037818000379b800037af200037ca000037d940003
7f2c000380ba0003822e0003843e000386c60003890600038ab600038c98
00038e70000390e200039294000393e2000395ae00039672000398240003
99f800039ad200039c0400039d5000039ea40003a0b00003a2240003a3a0
0003a3b00003a3c00003a3d00003a3e00003a3f00003a4ac0003a57a0003
a6ac0003a79a0003a7aa0003a7ba0003a81e0003a8880003a8b80003a8c8
0003a8d80003a9040003a9340003a9880003a9de0003aa3c0003aa740003
ab380003ac0e0003ac440003ac7c0003acc40003acf60003ad880003ae4a
0003b0480003b11e0003b35c0003b54e0003b6640003b69a0003b6de0003
b7220003b7660003b79c0003b7ce0003b8100003b8820003b8d40003b8e4
0003b95c0003b9e20003ba520003bab40003bb3a0003bb9a0003bc040003
bc780003bce80003bd460003bdec0003be840003bef00003bf7e0003bfd8
0003c0460003c0f00003c1960003c22c0003c29c0003c31e0003c3820003
c42e0003c4ec0003c5980003c62a0003c6880003c6f40003c74a0003c7cc
0003c84a0003c8d00003c95c0003c9b60003ca220003ca920003cb000003
cb700003cbf40003cc840003ccea0003cd640003cde00003ce580003cefe
0003cf960003d0260003d0840003d1220003d19e0003d2300003d2d40003
d37e0003d4160003d4720003d4c60003d52e0003d5d40003d67e0003d748
0003d7ee0003d8500003d8a80003d9080003d9960003da1c0003daaa0003
db0a0003db6e0003dbd80003dc400003dca80003dd200003dda80003de3c
0003dea80003df100003df740003e0200003e0e00003e18e0003e21c0003
e27a0003e2e60003e3560003e3fa0003e4a00003e5640003e6060003e66a
0003e6fa0003e76c0003e8040003e8820003e8fc0003e9680003e9f60003
ea520003eab00003eb360003ebb20003ec1a0003ec7e0003ecd20003ed40
0003eda80003ee260003ee9c0003ef160003ef960003eff20003f0580003
f0bc0003f15c0003f1fe0003f2bc0003f36c0003f3c80003f4400003f49e
0003f5280003f5c00003f64e0003f6b40003f7120003f7a00003f8120003
f8ac0003f9400003f9b00003fa200003fa980003faf60003fb560003fbd0
0003fc2a0003fc8a0003fce40003fd400003fda80003fe140003fe460003
fe700003febe0003ff020003ff720003ffda0004002800040096000400c6
0004011000040166000401e20004022800040288000402f00004033e0004
03a6000403d80004040a0004043e00040474000404a6000404fa000405c6
000405fc0004063000040676000406a60004072a000407b4000408200004
0884000408d600040944000409b0000409de00040a2200040a8e00040b00
00040b7000040bc000040c0c00040c9a00040cca00040cf200040d340004
0dc400040df600040e2800040e7a00040ec200040f8400040fc800041004
000410800004119a000412080004124c00041280000412b6000413460004
13ae000414400004149c000414e2000415260004156e0004159c000416d4
000417c2000418c4000419140004195000041c7000041cd200041d220004
1d6200041e9400041f7600042074000421840004232e000423f60004257a
0004272c000429b400042ae600042c1600042d1800042f0a00042f1a0004
2f4c00042fa8000431160004329400043406000434380004346c000435b6
000436fc0004391c00043aae00043c0a00043d0800043df800043f1a0004
401200044134000441be0004434200044462000446aa000448e800044a48
00044bac00044d5000044e8200044ffc0004510600045250000453da0004
551a00045620000457b6000458dc00045a4a00045bce00045c7800045c88
00045c9800045d3200045dea00045e1a00045e4a00045e7800045ea60004
60aa000461f6000463980004650a00046702000468e000046afa00046d04
00046fd2000472880004748600047620000478ec00047b6600047dec0004
80460004823400048380000484e8000486340004873e000488320004898c
00048ad800048d0200048edc00049064000491cc0004944a0004960c0004
966c0004969c000496cc000498120004991a00049a4a00049ab000049b06
00049b5400049bbc00049d8600049f960004a1ba0004a3b40004a4e80004
a6040004a7820004a94a0004aaf80004ac920004ae080004af720004b180
0004b3300004b52e0004b67e0004b86c0004b99e0004bb960004bdba0004
bf900004c0ee0004c25e0004c3720004c4ba0004c7100004c8fc0004c92c
0004cade0004cc4a0004cd940004ced40004d06c0004d1b20004d1c20004
d1f20004d2220004d42a0004d5ae0004d71c0004d8760004da740004db8a
0004ddba0004df160004e0bc0004e22a0004e4000004e5d60004e6460004
e6760004e6a40004e6d80004e70c0004e71c0004e72c0004e75c0004e78a
0004e7be0004e7f00004e8240004e8580004e88c0004e8be0004e9d80004
e9e80004ea180004ea460004ea7a0004eaac0004eae00004eb140004eb48
0004eb7c0004ebb00004ebe20004ec120004ec400004ec740004eca60004
ecda0004ed0e0004ed420004ed740004eda80004eddc0004eef40004ef04
0004f0820004f1fc0004f3800004f4e00004f6760004f8140004f95e0004
fa720004fc6e0004fdc20004fef60005001c0005013e0005037a000503e0
00050496000505000005056c000505fc00050640000506760005076e0005
07b0000507ec00050864000508a8000508ec0005096800050b4000050be6
00050c4600050c7c00050cb800050cfc00050d7800050dec00050e300005
0ed200050f3800050f7400050faa00050fee000510c00005111c00051158
000511e600051272000513460005144a000514ae00051554000515ee0005
16160005163e0005166e00051694000516ba000516e0000517060005172c
0005176e000517b0000517e0000518060005182c00051852000518780005
189e000518c4000518ea00051910000519360005196a000519b2000519e6
00051a3600051a5c00051a8200051aa800051ace00051afe00051b2e0005
1b5e00051b9a00051bca00051bf800051c2800051c5800051c7e00051ca4
00051cd800051d0c00051d3400051d5800051d7e00051da400051dca0005
1df000051e2600051e7a00051eaa00051eda00051f0000051f2600051f4c
00051f7200051f9800051fc00005200200052052000520780005209e0005
20c4000520ec0005211c0005214c0005217c000521ac000521d2000521f8
00052228000522560005227c000522a2000522c8000522ee000523140005
233a0005236e000523c0000523f60005246000052494000524dc00052510
0005256000052590000525c0000525f00005261e0005264e0005267c0005
26a2000526c80005270a0005274a0005277000052794000527c4000527f2
000528180005283e00052872000528be000528f20005293e000529800005
29c0000529f000052a2000052a4600052a6c00052a9200052ab600052adc
00052b0200052b2a00052b5200052b7800052b9e00052bc400052bea0005
2c1e00052c7000052ca600052d0600052d3600052d6400052d8a00052db0
00052de000052e1000052e3600052e5c00052e8c00052eba00052eee0005
2f2000052f5000052f7e00052fae00052fdc00053002000530280005304e
0005307200053098000530cc000531000005313200053160000531900005
31be000531ec0005321e0005325000053284000532b8000532ea0005331c
0005334c0005337c000533ae000533e00005341200053444000534760005
34a8000534d60005350400053536000535680005359a000535cc00053600
000536460005367a000536ae000536e20005371600053746000537760005
37a8000537da0005380e0005384200053876000538aa000538de00053912
000539460005397a000539ae000539e200053a1600053a4a00053a780005
3aa600053ada00053b0e00053b4000053b7200053ba400053bd600053c0a
00053c3e00053c7200053ca600053cda00053d0e00053d4200053d760005
3da600053dd600053e0800053e3a00053e6e00053ea200053ed400053f06
00053f3800053f6a00053f9e00053fd2000540000005402e000540600005
4092000540c6000540fa0005412c0005415e00054192000541c6000541fa
0005422e0005425e0005428e000542c2000542f60005432a0005435e0005
4392000543c6000543f80005442a0005445c0005448e000544c2000544f6
000545280005455a00054588000545b8000545e600054614000546420005
4672000546a2000546d0000546fe0005472e0005475c0005478c000547bc
000547ec0005482c0005486c000548ae000548f000054934000549780005
49ba000549fc00054a3e00054a8000054ac400054b0800054b4c00054b90
00054bd400054c1800054c5800054c9800054cd800054d1800054d5a0005
4d9c00054dde00054e2000054e6600054eac00054ef200054f3800054f7e
00054fc40005500a0005505000055092000550d4000551180005515c0005
51a0000551e4000552280005526c000552b0000552f4000553380005537c
000553c2000554080005544c00055490000554be000554ec0005552c0005
555200055594000555c400055606000556360005566600055696000556c6
000556ec00055754000557b0000557c00005583e0005591c0005595a0005
597e000559be000559ee00055a2e00055a6000055a9400055ac600055afa
00055b2000055bb000055c5200055d2a00055d5a00055d8a00055dbe0005
5df200055e2200055e5600055e8600055eb600055ee800055f1c00055f90
00056012000560ce000560fc0005612a0005615e00056192000561c20005
61f00005621e0005625200056282000562b2000562e4000563180005634c
000563e000056476000564aa000564ec0005651200056554000565840005
65c6000565f6000566280005665800056680000566a6000566dc0005672a
0005694800056b5800056d5200056f7400057294000572ba0005761e0005
783c00057a0e00057cd800057e5200058068000580a2000580da00058126
000581700005828a0005833e00058526000587460005890c000589ee0005
8b8200058c9400058dca00058f3200058f7800058fbe000590060005904a
000590b0000590e20005913a000591940005921400059290000592c20005
92f2000593220005935200059398000593d20005943a0005947e000594d6
00059554000595d2000596180005965a000596d0000597280005977a0005
97ac000597dc000597ec000597fc0005991000059aca00059c7a00059de2
00059ea400059f8c0005a0d60005a2420005a2520005a3320005a4080005
a5d40005a74e0005a91c0005aab00005aac00005ab640005ac3e0005acfc
0005ae4c0005afce0005b0960005b12a0005b1c20005b2c60005b4200005
b5660005b64a0005b7900005b8a60005ba120005bbea0005bcca0005be80
0005bf160005bfea0005c0e20005c1b20005c2740005c35c0005c4800005
c4900005c6880005c7940005c8a60005ca7e0005cc0e0005cdf00005cf20
0005d0740005d1a80005d2fc0005d4fa0005d5ea0005d6de0005d8d40005
d9ce0005dbf80005dda60005df5a0005e0c60005e1f40005e33a0005e50a
0005e6040005e7b20005e9580005ea7c0005ebac0005ebbc0005eda20005
eea00005f0120005f0de0005f1a40005f3060005f44e0005f6280005f732
0005f8c80005fb260005fcb40005fdac0005fe560005fef60005ff960006
011e000602160006037a000604c20006069e000607b40006088a00060a44
00060b1200060c4e00060dac00060f0c00060fe200061118000612880006
13a4000615680006163000061846000619c600061b1e00061cb800061d50
00061e3000061eae00061f7c00062056000620e2000621b8000621f60006
221600062236000622560006228c000622b2000622f60006230600062316
000623260006233600062346000623560006236600062376000623860006
2396000623a6000623a6000624780006262a000627fa00062a0400062b82
00062d4a00062f5000063104000631140006327600063404000636360006
371a000638340006386e00063926000639e600063a7e00063ace00063c26
00063cf600063dfe00063f020006402200064176000641dc0006421e0006
425c000642fa00064360000645040006471e000648e600064bf000064e3c
00065032000651c6000652f60006550800065682000657e2000659c80006
5bbe00065cf400065fde0006610800066214000663b60006657200066762
0006692000066b0400066ca200066f1c000671000006720c000674560006
75e8000677d60006793200067b2000067c6600067dd800067ffa0006810a
0006828a0006840a00068596000686e000068866000689f600068b560006
8ca600068dbc00068ee6000690aa000691d000069300000693c8000694e4
0006965000069798000698ba000699ba00069ac600069c6600069dc20006
9e9200069f600006a0820006a1900006a24a0006a33a0006a4240006a694
0006a8c40006aa9a0006ac180006ae020006aefa0006b0c20006b2880006
b35c0006b4f00006b6b00006b8860006b9e00006bb5c0006bc980006bda4
0006bf200006c0ca0006c2500006c3800006c4180006c4b00006c5ae0006
c6000006c6ea0006c8180006c8e00006c9ec0006cc140006ccdc0006cefc
0006d0c40006d29e0006d4460006d4e40006d52e0006d5780006d5c20006
d60c0006d6560006d6a00006d6ea0006d7340006d77e0006d7c80006d812
0006d85c0006d8a40006d8ec0006d9340006d97c0006d9c40006da0c0006
da540006da9c0006dae40006db2c0006db740006dbbc0006dc360006dcac
0006dd300006ddb80006de300006dea40006df260006dfac0006e0b60006
e24e0006e44a0006e45a0006e67e0006e8240006e96e0006eaa40006ebca
0006ed100006eea40006f0080006f1d60006f34e0006f3f20006f4300006
f46e0006f47e0006f5ec0006f7540006f91a0006face0006fcca0006fed2
0006fee20006fff20007010a0007021a0007025c000702a0000702e20007
0326000703980007040400070496000704de000705560007080c00070948
000709ec00070b5000070c7000070dee00070f56000710d2000712580007
13dc0007159a00071710000718d200071a8c00071b3600071c3000071d46
00071e6800071f1c0007204c0007209a0007214600072196000721c60007
220a0007224c0007227c00072400000725d4000727680007282c000728c2
0007295000072a2400072ac200072b5a00072c3a00072ca400072d7c0007
2e6200072ed600072ee600072ef600072f0600072f16000730880007309a
000731e6000732ee0007348c00073646000736bc00073700000737640007
37cc0007381c0007386c000738da0007394a000739ba00073a2c00073ab0
00073ba000073c9c00073d6a00073e5e00073fcc0007407c000741980007
432e000743a20007458c0007475200074762000747720007478200074792
000747a2000747b2000747c2000747d2000747e2000747f2000748020007
4abe00074e0800075162000753940007572600075852000759d000075b20
00075c5e00075dae00075eea0007607200076208000762d0000763b20007
65860007667000076846000769b600076acc00076bf000076dba00076f36
000770f4000771c40007733000077440000775d2000777b8000779140007
79f400077c0800077de400077f4e000781100007827600078414000785bc
000785ea0007861a0007864800078678000786aa000786d0000786f60007
87240007875400078784000787b8000787e6000788140007884200078874
000788a4000788d400078904000789340007896400078998000789c80007
89f800078a2800078a5c00078a8c00078aba00078aea00078b1000078b40
00078b7000078ba000078bd000078c0000078c1000078c4000078c700007
8ca000078cc600078cf600078d2400078d5400078d8400078daa00078dda
00078e0a0007900a000790380007906600079094000790ba000790e80007
91000007912e0007915400079182000791a8000791ce000791f400079224
0007924a0007927a0007940e0007943e0007946e000794a2000794d20007
94f8000795280007955600079584000795a8000795d6000795fa00079620
000796460007967600079798000797c8000797f8000798280007985c0007
989000079a5c00079a8c00079abc00079aec00079b2000079b5000079b84
00079bb200079be200079c1200079c4200079c7a00079caa00079cda0007
9cea00079cfa00079dd400079e5800079e6800079e7800079e880007a034
0007a0440007a0540007a14c0007a15c0007a16c0007a2b40007a2c40007
a3cc0007a3dc0007a4c80007a4d80007a4e80007a6a40007a6b40007a8c4
0007aa760007aaa60007aad60007ab060007ab340007ab640007ab940007
abc40007abf60007ac2a0007ac5e0007adc40007adf40007af5a0007af6a
0007af7a0007afac0007afbc0007b19c0007b3a80007b5320007b5620007
b5900007b7260007b7360007b8640007b8740007b8840007b9d80007b9e8
0007bd0c0007be320007bfd00007bffe0007c20e0007c3820007c3920007
c3a20007c3b20007c3c20007c3d20007c3e20007c3f20007c57e0007c71a
0007c72a0007c89c0007ca3e0007cbfa0007cdda0007cefa0007d0ca0007
d1e20007d3280007d55c0007d7060007d7c80007d8d80007d9900007da5e
0007db6e0007dc1c0007dcf20007ddf00007de620007df8c0007e0a00007
e0b20007e0c40007e0d60007e0e80007e0fa0007e10c0007e11e0007e130
0007e1420007e1540007e3760007e5660007e5960007e5c60007e5f60007
e6260007e65a0007e6a20007e8f40007ea400007ebc40007eda60007efc2
0007eff20007f0220007f0520007f0860007f2780007f4700007f7020007
f8840007f8b40007f8e40007f9140007f9480007fb6a0007fe6400080024
00080286000805180008076a0008079a0008094800080978000809a80008
09d800080a0800080a3c00080c8200080cb200080e96000810c800081368
0008159e000815ce0008173c000819380008196800081998000819c80008
19fc00081b8c00081dc800081fe40008215800082188000821bc0008236a
0008239a000826e600082716000827460008276c0008279c000827cc0008
27fc0008282c0008285c0008288c000828bc000828ec0008291400082944
00082974000829a400082bee00082c1e00082c4e00082f5a00082f8a0008
2fba00082fea00083010000830400008307000083096000830c6000830ec
0008311200083138000831680008318e000831be000831ee0008321e0008
325200083282000832a8000832d800083308000833380008335e00083384
000833aa000833d000083586000835b6000835e600083616000836460008
367a000836ae000838ee0008391e0008394e0008397e000839b2000839e2
00083a1200083a4200083a7200083a9800083c6600083f1600083ffc0008
40ac00084184000842780008438a000844b6000846bc000848280008496a
00084c6000084ec6000850c0000852f800085558000857640008595e0008
5ba400085d6a00085f6a0008610c0008639600086548000866ae0008684a
000869c600086b6000086d0e00086e8800086e9800087002000871d20008
7340000875060008767000087802000879aa00087ad800087bfe00087d56
00087ea600087fdc00088102000881da000882be000884a80008857e0008
85a200088776000888c0000889bc00088aaa00088ba400088c9800088d70
00088e4200088f22000890440008912800089226000892c0000893e60008
94d0000895ca0008966000089790000898600008993600089a0e00089b34
00089c2200089d1200089ddc00089ede00089fb80008a0a80008a1a20008
a26c0008a3640008a4760008a5380008a6600008a7120008a8140008a936
0008a9c60008aac40008ab160008ab780008aba80008ac280008ac540008
acca0008ad060008ae460008af3c0008b0240008b1180008b1fa0008b2bc
0008b3600008b4600008b5b00008b6680008b77a0008b7f40008b9580008
ba300008bb000008bbe40008bd080008bdda0008beea0008c0380008c0ea
0008c2100008c2a60008c3940008c42c0008c5640008c63e0008c70a0008
c7f20008c8f00008ca3a0008cb4e0008cc3a0008cc9a0008ce320008cf56
0008cfe00008d1160008d1c80008d1d80008d23a0008d4b40008d7360008
d8600008dac40008dce40008df320008e1440008e3e40008e3f40008e40c
0008e4240008e43c0008e4540008e4640008e47e0008e5660008e5760008
e69e0008e77e0008e95c0008ea860008ebbc0008ed000008ede00008eef6
0008f0620008f0f40008f23e0008f3e00008f4060008f42c0008f4540008
f48e0008f4ec0008f5220008f7280008f9580008fb000008fca60008fe48
00090008000901cc000903580009039a000904080009049e000904d00009
05ca000906100009065e00090696000908bc000908e20009094e000909ba
00090ae800090bdc00090cd000090d1800090d6a00090dc600090e220009
0ee600090f5600090fda0009114e000911cc0009123a000912800009138e
0009141a000914da0009158a00091660000916c400091776000918560009
18dc000918dc000918dc00091ad600091c1a00091d5200091e8000092006
0009218c00092332000924bc000926b4000928ec00092af400092d3c0009
2fa000093200000932f200093382000934300009348c00093500000935a8
000935f40009368a0009372e00093786000937ae000937e4000938300009
38780009390a0009398200093a0400093aae00093b0a00093b7e00093c2a
00093c7600093d0c00093dae00093e0000093e2400093e5600093ea20009
3eea0009408600094218000942ea00094538000945fc000947760009481a
0009490e00094a4600094b9800094c7a00094d5200094e2e00094f7c0009
5026000950ea000951e800095296000953e0000954e400095606000956aa
0009576c0009583a000958f0000959fe00095b1200095bbc00095cde0009
5dc000095ea600095fb0000960f200096216000963320009642800096540
0009667400096808000968b80009695a00096a1400096ac800096b960009
6bf000096ccc00096db000096ef000096fb8000970360009712600097236
000972e2000973d40009743400097530000975c4000976740009770a0009
777e0009785a00097a4c00097b8200097c6a00097d1600097dea00097eba
00097f4a00097f8000097fb4000980080009816e000982fc000984300009
853e0009867c000987460009884c0009896a00098b4000098c0c00098d30
00098ea800098f9a0009909c000991c40009929e000993c8000994f40009
958400099602000996ea0009983a00099934000999c400099abe00099c22
00099df400099f580009a0520009a1b60009a3840009a4280009a4ba0009
a5680009a6360009a6d20009a7ec0009a9860009aaa40009ab360009ac54
0009adf20009b00e0009b19a0009b29a0009b4280009b6340009b6a60009
b73a0009b8120009b92e0009ba1c0009bb260009bcb40009bd620009be42
0009beca0009c0280009c2480009c3760009c3a20009c3f60009c42a0009
c45e0009c4c20009c5280009c55c0009c5b80009c6840009c72a0009c7d4
0009c80a0009c8380009c8640009ca480009ca6c0009caa60009cae20009
cb3a0009cbba0009cc340009cca80009cd5e0009ce7c0009d0140009d086
0009d1380009d1640009d1900009d2200009d2b00009d3160009d37a0009
d3c40009d4120009d45e0009d4a80009d51c0009d58e0009d6180009d6a2
0009d72c0009d7b40009d8600009d9340009da100009da640009dabc0009
daf60009db480009db800009dbce0009dc4a0009dcf00009dd960009de6a
0009df580009df7c0009dfa00009e0040009e1860009e2dc0009e3880009
e3c20009e40c0009e4840009e4fe0009e5a20009e6480009e6da0009e734
0009e7840009e8aa0009e99c0009eaa60009eb9e0009ec5c0009ec780009
ed0c0009ed2a0009ee180009ee380009ee480009ee580009ef680009f11a
0009f2160009f3580009f4500009f5b20009f67a0009f7a40009f88c0009
f9d80009fae60009fc520009fd400009fe300009ff50000a0056000a0188
000a02a0000a03ee000a0520000a05e8000a0680000a0744000a07e2000a
08b2000a0970000a0a78000a0b54000a0c74000a0d56000a0e3e000a0f4a
000a107c000a11d2000a130c000a1478000a15c6000a16be000a183e000a
1964000a1a06000a1aae000a1b7c000a1c56000a1d1c000a1dfa000a1f2a
000a2036000a2140000a224a000a234e000a245a000a2550000a2668000a
2722000a27dc000a28a4000a28c0000a2982000a2a44000a2afa000a2b16
000a2bbe000a2ce0000a2d96000a2f02000a3014000a30f2000a3242000a
3326000a33f8000a34a8000a3564000a3632000a36e8000a379a000a3846
000a3862000a3912000a3994000a3a90000a3b6c000a3c26000a3cce000a
3d4e000a3dd0000a3ea4000a3fb2000a40a0000a41d6000a42b2000a438a
000a4498000a45ca000a4714000a481a000a48e2000a49f2000a4ae6000a
4be4000a4cae000a4d7e000a4eb4000a4f8c000a50ae000a524a000a5396
000a54cc000a55fa000a571c000a584c000a5920000a5a4a000a5b52000a
5c74000a5c84000a5d50000a5e88000a5fa2000a6030000a60d4000a61dc
000a62fc000a630c000a6424000a6434000a64bc000a65f6000a66e2000a
680c000a68e2000a69a8000a6a82000a6b12000a6c1e000a6d18000a6e7e
000a6f36000a7006000a7114000a7124000a726e000a7384000a73be000a
74bc000a761e000a772c000a7872000a7938000a7a3c000a7b28000a7c4c
000a7db6000a7eec000a7fd0000a810a000a8172000a82b6000a834a000a
842a000a8528000a866c000a86fc000a87ca000a87da000a88ca000a89bc
000a8b16000a8c7c000a8c8c000a8c9c000a8daa000a8e28000a8f62000a
908e000a91e2000a9306000a93c6000a9446000a9508000a9602000a9744
000a97f6000a9904000a9a46000a9ba6000a9cca000a9d84000a9d94000a
9edc000a9f68000100000dfa00f2003c0097000600020010002f00560000
04ed0258000400020000005303ea0000000300000000021a000000000003
00000001001e021a0000000300000002000c023800000003000000030056
02440000000300000004002c025600000003000000050018029a00000003
00000006003002b20000000300000007007602e200000003000000080030
000e000000030000000900860358000000030000000d0e0403de00010000
00000000010d11e20001000000000001000f12ef00010000000000020006
12fe0001000000000003002b130400010000000000040016130d00010000
00000005000c132f00010000000000060018133b0001000000000007003b
13530001000000000008001811e900010000000000090043138e00010000
0000000d070213d10003000104030002000e1ad30003000104030004002e
1ae10003000104050002000e1b0f0003000104050004002e1b1d00030001
04060002000c1b4b0003000104060004002c1b570003000104070002000c
1b830003000104070004002c1b8f0003000104080002000c1bbb00030001
04080004002c1bc70003000104090000021e1bf30003000104090001001e
021a0003000104090002000c023800030001040900030056024400030001
04090004002c025600030001040900050018029a00030001040900060030
02b20003000104090007007602e200030001040900080030000e00030001
0409000900860358000300010409000d0e141e1100030001040a0002000e
2c2500030001040a0004002e2c3300030001040b000200142c6100030001
040b000400342c7500030001040c000200102ca900030001040c00040030
2cb900030001040e000200082ce900030001040e000400282cf100030001
04100002000e2d190003000104100004002e2d270003000104130002000e
2d550003000104130004002e2d630003000104140002000c1b8300030001
04140004002c1b8f0003000104150002000e2d910003000104150004002e
2d9f0003000104160002000e2dcd0003000104160004002e2ddb00030001
04190002000c2e090003000104190004002c2e1500030001041b0002000e
2e4100030001041b0004002e2e4f00030001041d0002000c1b8300030001
041d0004002c1b8f00030001041f0002000c2e7d00030001041f0004002c
2e890003000104240002000e2eb50003000104240004002e2ec300030001
042a0002000e2ef100030001042a0004002e2eff00030001042d0002000c
2f2d00030001042d0004002c2f3900030001080a0002000e2c2500030001
080a0004002e2c330003000108160002000e2dcd0003000108160004002e
2ddb000300010c0a0002000e2c25000300010c0a0004002e2c3300030001
0c0c000200102ca9000300010c0c000400302cb900a90020003200300031
003700200054006800650020004d006f006e006f00740079007000650020
0043006f00720070006f0072006100740069006f006e002e00200041006c
006c00200052006900670068007400730020005200650073006500720076
00650064002e0020000d000d0048006500620072006500770020004f0070
0065006e00540079007000650020004c00610079006f007500740020006c
006f00670069006300200063006f00700079007200690067006800740020
00a9002000320030003000330020002600200032003000300037002c0020
00520061006c00700068002000480061006e0063006f0063006b00200026
0020004a006f0068006e00200048007500640073006f006e002e00200054
0068006900730020006c00610079006f007500740020006c006f00670069
006300200066006f00720020004200690062006c006900630061006c0020
0048006500620072006500770020006900730020006f00700065006e0020
0073006f007500720063006500200073006f006600740077006100720065
00200075006e00640065007200200074006800650020004d004900540020
004c006900630065006e00730065003b002000730065006500200065006d
0062006500640064006500640020006c006900630065006e007300650020
006400650073006300720069007000740069006f006e00200066006f0072
002000640065007400610069006c0073002e00540069006d006500730020
004e0065007700200052006f006d0061006e004900740061006c00690063
004d006f006e006f0074007900700065003a00540069006d006500730020
004e0065007700200052006f006d0061006e0020004900740061006c0069
006300200028004d006900630072006f0073006f00660074002900560065
007200730069006f006e00200037002e0030003000540069006d00650073
004e006500770052006f006d0061006e00500053002d004900740061006c
00690063004d005400540069006d006500730020004e0065007700200052
006f006d0061006e00200069007300200061002000740072006100640065
006d00610072006b0020006f006600200054006800650020004d006f006e
006f007400790070006500200043006f00720070006f0072006100740069
006f006e002e004d006f006e006f00740079007000650020005400790070
0065002000440072006100770069006e00670020004f0066006600690063
00650020002d0020005300740061006e006c006500790020004d006f0072
00690073006f006e002c00200056006900630074006f00720020004c0061
007200640065006e007400200031003900330032004d006900630072006f
0073006f0066007400200073007500700070006c00690065006400200066
006f006e0074002e00200059006f00750020006d00610079002000750073
00650020007400680069007300200066006f006e007400200074006f0020
006300720065006100740065002c00200064006900730070006c00610079
002c00200061006e00640020007000720069006e007400200063006f006e
00740065006e00740020006100730020007000650072006d006900740074
0065006400200062007900200074006800650020006c006900630065006e
007300650020007400650072006d00730020006f00720020007400650072
006d00730020006f00660020007500730065002c0020006f006600200074
006800650020004d006900630072006f0073006f00660074002000700072
006f0064007500630074002c00200073006500720076006900630065002c
0020006f007200200063006f006e00740065006e007400200069006e0020
007700680069006300680020007400680069007300200066006f006e0074
002000770061007300200069006e0063006c0075006400650064002e0020
0059006f00750020006d006100790020006f006e006c0079002000280069
002900200065006d0062006500640020007400680069007300200066006f
006e007400200069006e00200063006f006e00740065006e007400200061
00730020007000650072006d006900740074006500640020006200790020
00740068006500200065006d00620065006400640069006e006700200072
00650073007400720069006300740069006f006e007300200069006e0063
006c007500640065006400200069006e0020007400680069007300200066
006f006e0074003b00200061006e00640020002800690069002900200074
0065006d0070006f0072006100720069006c007900200064006f0077006e
006c006f006100640020007400680069007300200066006f006e00740020
0074006f002000610020007000720069006e0074006500720020006f0072
0020006f00740068006500720020006f0075007400700075007400200064
0065007600690063006500200074006f002000680065006c007000200070
00720069006e007400200063006f006e00740065006e0074002e00200041
006e00790020006f00740068006500720020007500730065002000690073
002000700072006f0068006900620069007400650064002e000d000d0054
0068006500200066006f006c006c006f00770069006e00670020006c0069
00630065006e00730065002c0020006200610073006500640020006f006e
00200074006800650020004d004900540020006c006900630065006e0073
0065002000280068007400740070003a002f002f0065006e002e00770069
006b006900700065006400690061002e006f00720067002f00770069006b
0069002f004d00490054005f004c006900630065006e007300650029002c
0020006100700070006c00690065007300200074006f0020007400680065
0020004f00700065006e00540079007000650020004c00610079006f0075
00740020006c006f00670069006300200066006f00720020004200690062
006c006900630061006c00200048006500620072006500770020201c004c
00610079006f007500740020004c006f006700690063201d002000610073
0020006a006f0069006e0074006c007900200064006500760065006c006f
007000650064002000620079002000520061006c00700068002000480061
006e0063006f0063006b00200061006e00640020004a006f0068006e0020
0048007500640073006f006e002e0020000d000d005000650072006d0069
007300730069006f006e0020006900730020006800650072006500620079
0020006700720061006e007400650064002c002000660072006500650020
006f00660020006300680061007200670065002c00200074006f00200061
006e007900200070006500720073006f006e0020006f0062007400610069
006e0069006e00670020006100200063006f007000790020006f00660020
0074006800650020004f00700065006e00540079007000650020004c0061
0079006f007500740020006c006f00670069006300200066006f00720020
004200690062006c006900630061006c0020004800650062007200650077
00200061006e00640020006100730073006f006300690061007400650064
00200064006f00630075006d0065006e0074006100740069006f006e0020
00660069006c00650073002000280074006800650020201c004c00610079
006f007500740020004c006f00670069006300200053006f006600740077
006100720065201d0029002c00200074006f0020006400650061006c0020
0069006e00200074006800650020004c00610079006f007500740020004c
006f00670069006300200053006f00660074007700610072006500200077
006900740068006f00750074002000720065007300740072006900630074
0069006f006e002c00200069006e0063006c007500640069006e00670020
0077006900740068006f007500740020006c0069006d0069007400610074
0069006f006e002000740068006500200072006900670068007400730020
0074006f0020007500730065002c00200063006f00700079002c0020006d
006f0064006900660079002c0020006d0065007200670065002c00200070
00750062006c006900730068002c00200064006900730074007200690062
007500740065002c0020007300750062006c006900630065006e00730065
002c00200061006e0064002f006f0072002000730065006c006c00200063
006f00700069006500730020006f006600200074006800650020004c0061
0079006f007500740020004c006f00670069006300200053006f00660074
0077006100720065002c00200061006e006400200074006f002000700065
0072006d0069007400200070006500720073006f006e007300200074006f
002000770068006f006d00200074006800650020004c00610079006f0075
00740020004c006f00670069006300200053006f00660074007700610072
00650020006900730020006600750072006e006900730068006500640020
0074006f00200064006f00200073006f002c0020007300750062006a0065
0063007400200074006f002000740068006500200066006f006c006c006f
00770069006e006700200063006f006e0064006900740069006f006e0073
003a000d000d005400680065002000610062006f0076006500200063006f
00700079007200690067006800740020006e006f00740069006300650020
0061006e0064002000740068006900730020007000650072006d00690073
00730069006f006e0020006e006f00740069006300650020007300680061
006c006c00200062006500200069006e0063006c00750064006500640020
0069006e00200061006c006c00200063006f00700069006500730020006f
00720020007300750062007300740061006e007400690061006c00200070
006f007200740069006f006e00730020006f006600200074006800650020
004c00610079006f007500740020004c006f00670069006300200053006f
006600740077006100720065002e000d000d00540048004500200053004f
004600540057004100520045002000490053002000500052004f00560049
00440045004400200027004100530020004900530027002c002000570049
00540048004f00550054002000570041005200520041004e005400590020
004f004600200041004e00590020004b0049004e0044002c002000450058
005000520045005300530020004f005200200049004d0050004c00490045
0044002c00200049004e0043004c005500440049004e0047002000420055
00540020004e004f00540020004c0049004d004900540045004400200054
004f0020005400480045002000570041005200520041004e005400490045
00530020004f00460020004d00450052004300480041004e005400410042
0049004c004900540059002c0020004600490054004e0045005300530020
0046004f00520020004100200050004100520054004900430055004c0041
005200200050005500520050004f0053004500200041004e00440020004e
004f004e0049004e004600520049004e00470045004d0045004e0054002e
00200049004e0020004e004f0020004500560045004e0054002000530048
0041004c004c002000540048004500200041005500540048004f00520053
0020004f005200200043004f005000590052004900470048005400200048
004f004c00440045005200530020004200450020004c004900410042004c
004500200046004f005200200041004e005900200043004c00410049004d
002c002000440041004d00410047004500530020004f00520020004f0054
0048004500520020004c0049004100420049004c004900540059002c0020
005700480045005400480045005200200049004e00200041004e00200041
004300540049004f004e0020004f004600200043004f004e005400520041
00430054002c00200054004f005200540020004f00520020004f00540048
004500520057004900530045002c002000410052004900530049004e0047
002000460052004f004d002c0020004f005500540020004f00460020004f
005200200049004e00200043004f004e004e0045004300540049004f004e
00200057004900540048002000540048004500200053004f004600540057
0041005200450020004f0052002000540048004500200055005300450020
004f00520020004f00540048004500520020004400450041004c0049004e
0047005300200049004e002000540048004500200053004f004600540057
004100520045002ea9203230313720546865204d6f6e6f7479706520436f
72706f726174696f6e2e20416c6c20526967687473205265736572766564
2e200d0d486562726577204f70656e54797065204c61796f7574206c6f67
696320636f7079726967687420a92032303033202620323030372c205261
6c70682048616e636f636b2026204a6f686e20487564736f6e2e20546869
73206c61796f7574206c6f67696320666f72204269626c6963616c204865
62726577206973206f70656e20736f7572636520736f6674776172652075
6e64657220746865204d4954204c6963656e73653b2073656520656d6265
64646564206c6963656e7365206465736372697074696f6e20666f722064
657461696c732e54696d6573204e657720526f6d616e4974616c69634d6f
6e6f747970653a54696d6573204e657720526f6d616e204974616c696320
284d6963726f736f66742956657273696f6e20372e303054696d65734e65
77526f6d616e50532d4974616c69634d5454696d6573204e657720526f6d
616e20697320612074726164656d61726b206f6620546865204d6f6e6f74
79706520436f72706f726174696f6e2e4d6f6e6f74797065205479706520
44726177696e67204f6666696365202d205374616e6c6579204d6f726973
6f6e2c20566963746f72204c617264656e7420313933324d6963726f736f
667420737570706c69656420666f6e742e20596f75206d61792075736520
7468697320666f6e7420746f206372656174652c20646973706c61792c20
616e64207072696e7420636f6e74656e74206173207065726d6974746564
20627920746865206c6963656e7365207465726d73206f72207465726d73
206f66207573652c206f6620746865204d6963726f736f66742070726f64
7563742c20736572766963652c206f7220636f6e74656e7420696e207768
696368207468697320666f6e742077617320696e636c756465642e20596f
75206d6179206f6e6c792028692920656d626564207468697320666f6e74
20696e20636f6e74656e74206173207065726d6974746564206279207468
6520656d62656464696e67207265737472696374696f6e7320696e636c75
64656420696e207468697320666f6e743b20616e6420286969292074656d
706f726172696c7920646f776e6c6f6164207468697320666f6e7420746f
2061207072696e746572206f72206f74686572206f757470757420646576
69636520746f2068656c70207072696e7420636f6e74656e742e20416e79
206f74686572207573652069732070726f686962697465642e0d0d546865
20666f6c6c6f77696e67206c6963656e73652c206261736564206f6e2074
6865204d4954206c6963656e73652028687474703a2f2f656e2e77696b69
70656469612e6f72672f77696b692f4d49545f4c6963656e7365292c2061
70706c69657320746f20746865204f70656e54797065204c61796f757420
6c6f67696320666f72204269626c6963616c2048656272657720d24c6179
6f7574204c6f676963d3206173206a6f696e746c7920646576656c6f7065
642062792052616c70682048616e636f636b20616e64204a6f686e204875
64736f6e2e200d0d5065726d697373696f6e206973206865726562792067
72616e7465642c2066726565206f66206368617267652c20746f20616e79
20706572736f6e206f627461696e696e67206120636f7079206f66207468
65204f70656e54797065204c61796f7574206c6f67696320666f72204269
626c6963616c2048656272657720616e64206173736f6369617465642064
6f63756d656e746174696f6e2066696c6573202874686520d24c61796f75
74204c6f67696320536f667477617265d3292c20746f206465616c20696e
20746865204c61796f7574204c6f67696320536f66747761726520776974
686f7574207265737472696374696f6e2c20696e636c7564696e67207769
74686f7574206c696d69746174696f6e207468652072696768747320746f
207573652c20636f70792c206d6f646966792c206d657267652c20707562
6c6973682c20646973747269627574652c207375626c6963656e73652c20
616e642f6f722073656c6c20636f70696573206f6620746865204c61796f
7574204c6f67696320536f6674776172652c20616e6420746f207065726d
697420706572736f6e7320746f2077686f6d20746865204c61796f757420
4c6f67696320536f667477617265206973206675726e697368656420746f
20646f20736f2c207375626a65637420746f2074686520666f6c6c6f7769
6e6720636f6e646974696f6e733a0d0d5468652061626f766520636f7079
7269676874206e6f7469636520616e642074686973207065726d69737369
6f6e206e6f74696365207368616c6c20626520696e636c7564656420696e
20616c6c20636f70696573206f72207375627374616e7469616c20706f72
74696f6e73206f6620746865204c61796f7574204c6f67696320536f6674
776172652e0d0d54484520534f4654574152452049532050524f56494445
4420274153204953272c20574954484f55542057415252414e5459204f46
20414e59204b494e442c2045585052455353204f5220494d504c4945442c
20494e434c5544494e4720425554204e4f54204c494d4954454420544f20
5448452057415252414e54494553204f46204d45524348414e544142494c
4954592c204649544e45535320464f52204120504152544943554c415220
505552504f534520414e44204e4f4e494e4652494e47454d454e542e2049
4e204e4f204556454e54205348414c4c2054484520415554484f5253204f
5220434f5059524947485420484f4c44455253204245204c4941424c4520
464f5220414e5920434c41494d2c2044414d41474553204f52204f544845
52204c494142494c4954592c205748455448455220494e20414e20414354
494f4e204f4620434f4e54524143542c20544f5254204f52204f54484552
574953452c2041524953494e472046524f4d2c204f5554204f46204f5220
494e20434f4e4e454354494f4e20574954482054484520534f4654574152
45204f522054484520555345204f52204f54484552204445414c494e4753
20494e2054484520534f4654574152452e00630075007200730069007600
6100540069006d006500730020004e0065007700200052006f006d006100
6e00200063007500720073006900760061006b00750072007a00ed007600
6100540069006d006500730020004e0065007700200052006f006d006100
6e0020006b00750072007a00ed00760061006b0075007200730069007600
540069006d006500730020004e0065007700200052006f006d0061006e00
20006b00750072007300690076004b007500720073006900760054006900
6d006500730020004e0065007700200052006f006d0061006e0020004b00
75007200730069007603a003bb03ac03b303b903b100540069006d006500
730020004e0065007700200052006f006d0061006e002003a003bb03ac03
b303b903b100a90020003200300031003700200054006800650020004d00
6f006e006f007400790070006500200043006f00720070006f0072006100
740069006f006e002e00200041006c006c00200052006900670068007400
73002000520065007300650072007600650064002e0020000d000a000d00
0a0048006500620072006500770020004f00700065006e00540079007000
650020004c00610079006f007500740020006c006f006700690063002000
63006f0070007900720069006700680074002000a9002000320030003000
330020002600200032003000300037002c002000520061006c0070006800
2000480061006e0063006f0063006b002000260020004a006f0068006e00
200048007500640073006f006e002e002000540068006900730020006c00
610079006f007500740020006c006f00670069006300200066006f007200
20004200690062006c006900630061006c00200048006500620072006500
770020006900730020006f00700065006e00200073006f00750072006300
6500200073006f00660074007700610072006500200075006e0064006500
7200200074006800650020004d004900540020004c006900630065006e00
730065003b002000730065006500200065006d0062006500640064006500
640020006c006900630065006e0073006500200064006500730063007200
69007000740069006f006e00200066006f00720020006400650074006100
69006c0073002e004d006900630072006f0073006f006600740020007300
7500700070006c00690065006400200066006f006e0074002e0020005900
6f00750020006d0061007900200075007300650020007400680069007300
200066006f006e007400200074006f002000630072006500610074006500
2c00200064006900730070006c00610079002c00200061006e0064002000
7000720069006e007400200063006f006e00740065006e00740020006100
730020007000650072006d00690074007400650064002000620079002000
74006800650020006c006900630065006e00730065002000740065007200
6d00730020006f00720020007400650072006d00730020006f0066002000
7500730065002c0020006f006600200074006800650020004d0069006300
72006f0073006f00660074002000700072006f0064007500630074002c00
200073006500720076006900630065002c0020006f007200200063006f00
6e00740065006e007400200069006e002000770068006900630068002000
7400680069007300200066006f006e007400200077006100730020006900
6e0063006c0075006400650064002e00200059006f00750020006d006100
790020006f006e006c0079002000280069002900200065006d0062006500
640020007400680069007300200066006f006e007400200069006e002000
63006f006e00740065006e00740020006100730020007000650072006d00
690074007400650064002000620079002000740068006500200065006d00
620065006400640069006e00670020007200650073007400720069006300
740069006f006e007300200069006e0063006c0075006400650064002000
69006e0020007400680069007300200066006f006e0074003b0020006100
6e006400200028006900690029002000740065006d0070006f0072006100
720069006c007900200064006f0077006e006c006f006100640020007400
680069007300200066006f006e007400200074006f002000610020007000
720069006e0074006500720020006f00720020006f007400680065007200
20006f007500740070007500740020006400650076006900630065002000
74006f002000680065006c00700020007000720069006e00740020006300
6f006e00740065006e0074002e00200041006e00790020006f0074006800
6500720020007500730065002000690073002000700072006f0068006900
620069007400650064002e000d000a000d000a0054006800650020006600
6f006c006c006f00770069006e00670020006c006900630065006e007300
65002c0020006200610073006500640020006f006e002000740068006500
20004d004900540020006c006900630065006e0073006500200028006800
7400740070003a002f002f0065006e002e00770069006b00690070006500
6400690061002e006f00720067002f00770069006b0069002f004d004900
54005f004c006900630065006e007300650029002c002000610070007000
6c00690065007300200074006f00200074006800650020004f0070006500
6e00540079007000650020004c00610079006f007500740020006c006f00
670069006300200066006f00720020004200690062006c00690063006100
6c00200048006500620072006500770020201c004c00610079006f007500
740020004c006f006700690063201d0020006100730020006a006f006900
6e0074006c007900200064006500760065006c006f007000650064002000
620079002000520061006c00700068002000480061006e0063006f006300
6b00200061006e00640020004a006f0068006e0020004800750064007300
6f006e002e0020000d000a000d000a005000650072006d00690073007300
69006f006e00200069007300200068006500720065006200790020006700
720061006e007400650064002c002000660072006500650020006f006600
20006300680061007200670065002c00200074006f00200061006e007900
200070006500720073006f006e0020006f0062007400610069006e006900
6e00670020006100200063006f007000790020006f006600200074006800
650020004f00700065006e00540079007000650020004c00610079006f00
7500740020006c006f00670069006300200066006f007200200042006900
62006c006900630061006c00200048006500620072006500770020006100
6e00640020006100730073006f0063006900610074006500640020006400
6f00630075006d0065006e0074006100740069006f006e00200066006900
6c00650073002000280074006800650020201c004c00610079006f007500
740020004c006f00670069006300200053006f0066007400770061007200
65201d0029002c00200074006f0020006400650061006c00200069006e00
200074006800650020004c00610079006f007500740020004c006f006700
69006300200053006f006600740077006100720065002000770069007400
68006f007500740020007200650073007400720069006300740069006f00
6e002c00200069006e0063006c007500640069006e006700200077006900
740068006f007500740020006c0069006d00690074006100740069006f00
6e0020007400680065002000720069006700680074007300200074006f00
20007500730065002c00200063006f00700079002c0020006d006f006400
6900660079002c0020006d0065007200670065002c002000700075006200
6c006900730068002c002000640069007300740072006900620075007400
65002c0020007300750062006c006900630065006e00730065002c002000
61006e0064002f006f0072002000730065006c006c00200063006f007000
69006500730020006f006600200074006800650020004c00610079006f00
7500740020004c006f00670069006300200053006f006600740077006100
720065002c00200061006e006400200074006f0020007000650072006d00
69007400200070006500720073006f006e007300200074006f0020007700
68006f006d00200074006800650020004c00610079006f00750074002000
4c006f00670069006300200053006f006600740077006100720065002000
6900730020006600750072006e0069007300680065006400200074006f00
200064006f00200073006f002c0020007300750062006a00650063007400
200074006f002000740068006500200066006f006c006c006f0077006900
6e006700200063006f006e0064006900740069006f006e0073003a000d00
0a000d000a005400680065002000610062006f0076006500200063006f00
700079007200690067006800740020006e006f0074006900630065002000
61006e0064002000740068006900730020007000650072006d0069007300
730069006f006e0020006e006f0074006900630065002000730068006100
6c006c00200062006500200069006e0063006c0075006400650064002000
69006e00200061006c006c00200063006f00700069006500730020006f00
720020007300750062007300740061006e007400690061006c0020007000
6f007200740069006f006e00730020006f00660020007400680065002000
4c00610079006f007500740020004c006f00670069006300200053006f00
6600740077006100720065002e000d000a000d000a005400480045002000
53004f004600540057004100520045002000490053002000500052004f00
56004900440045004400200027004100530020004900530027002c002000
57004900540048004f00550054002000570041005200520041004e005400
590020004f004600200041004e00590020004b0049004e0044002c002000
450058005000520045005300530020004f005200200049004d0050004c00
4900450044002c00200049004e0043004c005500440049004e0047002000
42005500540020004e004f00540020004c0049004d004900540045004400
200054004f0020005400480045002000570041005200520041004e005400
49004500530020004f00460020004d00450052004300480041004e005400
4100420049004c004900540059002c0020004600490054004e0045005300
5300200046004f0052002000410020005000410052005400490043005500
4c0041005200200050005500520050004f0053004500200041004e004400
20004e004f004e0049004e004600520049004e00470045004d0045004e00
54002e00200049004e0020004e004f0020004500560045004e0054002000
5300480041004c004c002000540048004500200041005500540048004f00
5200530020004f005200200043004f005000590052004900470048005400
200048004f004c00440045005200530020004200450020004c0049004100
42004c004500200046004f005200200041004e005900200043004c004100
49004d002c002000440041004d00410047004500530020004f0052002000
4f00540048004500520020004c0049004100420049004c00490054005900
2c0020005700480045005400480045005200200049004e00200041004e00
200041004300540049004f004e0020004f004600200043004f004e005400
52004100430054002c00200054004f005200540020004f00520020004f00
540048004500520057004900530045002c00200041005200490053004900
4e0047002000460052004f004d002c0020004f005500540020004f004600
20004f005200200049004e00200043004f004e004e004500430054004900
4f004e00200057004900540048002000540048004500200053004f004600
5400570041005200450020004f0052002000540048004500200055005300
450020004f00520020004f00540048004500520020004400450041004c00
49004e0047005300200049004e002000540048004500200053004f004600
540057004100520045002e00430075007200730069007600610054006900
6d006500730020004e0065007700200052006f006d0061006e0020004300
7500720073006900760061004b00750072007300690076006f0069007400
7500540069006d006500730020004e0065007700200052006f006d006100
6e0020004b00750072007300690076006f00690074007500490074006100
6c006900710075006500540069006d006500730020004e00650077002000
52006f006d0061006e0020004900740061006c0069007100750065004401
51006c007400540069006d006500730020004e0065007700200052006f00
6d0061006e002000440151006c00740043006f0072007300690076006f00
540069006d006500730020004e0065007700200052006f006d0061006e00
200043006f0072007300690076006f004300750072007300690065006600
540069006d006500730020004e0065007700200052006f006d0061006e00
200043007500720073006900650066006b00750072007300790077006100
540069006d006500730020004e0065007700200052006f006d0061006e00
20006b0075007200730079007700610049007400e1006c00690063006f00
540069006d006500730020004e0065007700200052006f006d0061006e00
200049007400e1006c00690063006f041a04430440044104380432005400
69006d006500730020004e0065007700200052006f006d0061006e002004
1a04430440044104380432004b00750072007a00ed007600610054006900
6d006500730020004e0065007700200052006f006d0061006e0020004b00
750072007a00ed00760061013000740061006c0069006b00540069006d00
6500730020004e0065007700200052006f006d0061006e00200130007400
61006c0069006b0050006f016100650076006e006f00540069006d006500
730020004e0065007700200052006f006d0061006e00200050006f016100
650076006e006f006e00670068006900ea006e006700540069006d006500
730020004e0065007700200052006f006d0061006e0020006e0067006800
6900ea006e006700450074007a0061006e006100540069006d0065007300
20004e0065007700200052006f006d0061006e002000450074007a006100
6e006100410c005403cd02b0001d001f03cd03cd03cc03cb003c001f03cb
b3061d1f00410c03bc003003bc004003bc00a003bc00b003bc0005ffc003
bbb345453240b803bbb32b2e3240b803bbb2282932b9ffc003bbb31a2632
80411303bb009f03bb00af03bb00cf03bb0004000003bb001f03bb000203
bb02af0027001fffc003b9b2161b32b9ffc003b8b2424232b9ffc003b8b2
363832b9ffc003b8b32a2d32df410a03b800ef03b8000203b803b9002800
1fffc003b9b3282e32f0410f03b90001000003b7000103b700030800001f
03be03bf002b001fffc003bfb2242a32b903b60381b23a1f0f411703b300
1003b2002003b2005003b2007003b200e003b2000600cf03b300df03b300
ef03b300ff03b30004001203a8b2e2891fbe039f016b019a001f03980093
0801400c1f7f047f05027f027f03025fbb02b00001ffc00117b2196632b8
ffc0b3651a6632b9ff800173b2196632bd038401170800001fffc002afb2
313340b802afb22e3340b802afb328293240b802afb326273240b802afb3
21253240b802afb31c203240b802afb2233340b802afb21933a0bc02af00
b002af00e002afb5034003212932b8fff2b33a263d32bc03820382038200
3a0800b51f40255c331eb80381b25c6432b8ffeeb3252e3314b80381b32b
2e3269be03810001008a03810001000e0381b32b2f3210b80381b3515b32
0cb80381b34e513222b80381b3474d320eb80381b246330ab80381400926
473212254358320cb80381b2323310b80381b22a3312b80381b3373d3212
bb0381003d0033fff44015253d331825355b32102526343206252a330c25
2e33b8fffe4024252d330c3a2f33329925aa25ba25c92504052536330c25
323832193a293a383a03182517b80381b42825382504bc03810381038100
25080040101f0f1f2b2e32691f781f020b1f303332b8fff1b31f263d32bc
038003800380001f080040151f375f07af07025f06af060222ac2b2e3209
ac2f33b8ffdc400aac1f223222232b52320eb8037fb229330eb8037fb222
3314b8037fb21e2032b8ffe7b71e2b33321e2b2f32b9ffc0037fb64c4f32
32262c33410affee037f00390033fff8037f002b0033ffea037fb23a3320
b8037fb33f46321eb8037fb32f3a3212b8037fb22e331eb8037fb32a2d32
0eb8037fb2263304b8037fb3494a3404b8037fb2463304b8037fb2213318
b8037f400c1d3322263032322226333832b8fff8400a262b2f3209261b21
328abe037f0001037f037f037f00260800402e1f371f062f063f06039f02
af02bf02cf02049f03af03bf03cf03046f037f038f03031f032f033f034f
035f03050f413a02ed0001005f02ed009f02ed00df02ed0003002f02ed00
3f02ed006f02ed000300af02af0001004f02af009f02af0002002f02af00
3f02af0002003f02b00001000f02b0001f02b00002004f02af005f02af00
02002f02af003f02af0002007003b2000103b203b202ed02ed02b002b002
af02af401a37010030014001020101000901020008001717000000121108
40410b027b02230034000d013d0034000d01370034000d011b401a340d8f
340d84340d68340d59340d54340d48340d2c340d28340d41100235002000
0d021b0020000d01fc0020000d01c30020000d01500020000d012c401a20
0df0200dbe200d94200d79200d6a200d61200d5f200d44200d410d013e01
38000d003d0138000d00300138000d001d0138000d01fdb40f4d0f0009bf
01fd004d000d03b1037f0015001f0215b226341fb80214b2263f1fb80208
b21ebb1f41190206001e0801001f0205001f02ab001f0204001f02ab001f
0203001f0401001f02010031019a001f01fb00230156001f01aeb2262a1f
b801adb2262a1fb801abb226341f411501a8002602ab001f01a5001e0125
001f01a400ab02ab001f01a2003102ab001f01a1003102ab001f019db223
6c1fb8019cb2236c1f4109019b00230401001f019a0033019a001f0176b2
262e1fb8016cb231721f4111016b0023019a001f016800240401001f0145
00260801001f013f00230401001f0123b21e9e1fbc0121001e0201001f01
00b426791ffd1fb80125b21ffa33b80801b21ff924b802abb21fe826b801
01b21fe51fb8019ab21fe431b80101400b1fe331e41fe231891fd226b802
01b61fd026cd1fcd25b80401b21fb731b8019ab21fae26b80801b21fac1e
b80401400b1f9e315e1f97269e1f9333b80801b21f8a24b8019ab21f831f
b802ab40131f82236c1f7523e41f7026cd1f6423721f5e25b80401b21f5d
23b802abb21f55e6b80401b21f5324b80201b21f4f33b802abb21f4e26b8
040140131f4731671f4626ab1f4331cd1f3e235e1f3a1fb80401b61f3924
e41f3723b80801b21f2e23b80401b21f2a1eb80125400b1f2923ab1f2731
ab1f5537bc01c60007018a0007012b402e077f077107690766074b074007
380736072d07220721071408120810080e080c080a080808060804080208
000814b8ffe0402b00000100140610000001000604000001000410000001
001002000001000200000001000002010802004a00b013034b024b5342b0
372b4bb807ff52b0382b4bb009505b58b101018e59014bb0c063004b6220
b0f65323b8010a515ab005234201b0124b004b544218b0382bb00288b801
005458b801ffb101018e851bb0124358b900010140858d1bb90001015985
8d59590016763f183f123e113946443e113946443e113946443e11394644
3e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b181db0964b5358b0aa1d59b0324b5358b0ff1d594b
b04753205c58b9027d027b4544b9027c027b45445958b90146027d455258
b9027d01464459594bb04753205c58b9001e027c4544b90026027c454459
58b9017f001e455258b9001e017f4459594bb05e53205c58b9001f027d45
44b90025027d45445958b901a8001f455258b9001f01a84459594bb80101
53205c58b1ab1f4544b11f1f45445958b9047000ab455258b900ab047044
59594bb8012553205c58b1e61f4544b11f1f45445958b9051000e6455258
b900e605104459594bb01753205c58b124244544b1312445445958b12224
455258b124224459594bb05153205c58b124244544b1232445445958b17d
24455258b1247d4459594bb06e53205c58b124244544b1332445445958b1
aa24455258b124aa4459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b456953
42014b5058b108004259435c58b1080042591610703eb0124358b911b53d
801bba011c03d9000b2b59b00a2342b00b2342003f3f182b103c012f5d06
0cb0062342b0072342b0124358b93b21187e1bba040001a8000b2b59b00c
2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b0
0f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342
002b4bb02e5358b8016b45b02a60b8016b23445900184569444569441845
6944456944737373737375757573737475757575752b4bb026534bb03d51
5a58b1262645b0196044592b45186944742b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b004bb02a534bb03f515a58b1070745b0
4060445973732b2b451869442b2b752b2b4518694475752b2b752b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b2b2b451869442b002b732b
2b2b2b2b2b2b2b2b012b2b2b007373732b2b2b01435c58b8ffdeb31e1c33
18b8037fb52b3318262b33b9fff00381b112332b2b2b2b590173742b2b2b
002b73752b2b732b2b2b2b2b73752b2b2b2b73002b2b4569442b2b0000>
[15881 15801 15881 16357 16281 15405 16017 16333 16245 16357 16089 15833 15353
16137 16289 16117 15813 15469 14373 16057 16361 16065 16373 16325 15709 16089
16349 15329 15277 14621 16009 15293 16021 15413 15321 16377 16005 16289 16297
16373 16177 15549 15621 12881 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
4 0 88 <0001003cffe803c40389003c01974084083a193a021235314731543c6a16
79157a16ac15c500fa1509552e543b6a09034b1554005a150336003c1502
2128293902ab090139263f284f285f28f515f616f53907143b3c3c13090a
262738393a16170533153c1326271b3d2e33331f1b20141b1b202b073c00
060003031f133c1413133c180e0b1b133d28201b3c13100a8a096003b802
03401b3cad134043351340181934134015351f134f135f138f139f130513
b80234400c33251b402e012e252095121bb8ffc0b23a351bb8ffc0b31819
341bb8ffc0b31415341bb8ffc0b32c34341bb8ffc04019232834301b401b
a01b031b193d091b1713171b133d0a77c3182b2b103c3c2b2b2b4e10f45d
2b2b2b2b2b435c58b51b4023123f1bb8ffc0b3120b3f1bb8ffc0b116392b
2b2b59014df4ed5d10edf45d2b2b2be4edf4ed2b103c103c2b10c0c0003f
3c870e2e2b057d10c400183f3c3f870e2e2b0e7d10c40111123939111239
12173910c910c9870e103cc43130005d01715d5d5d5d5d435c5840181518
0b3915180c3900220c393b220c3930220c391e220c392b2b2b2b2b2b5901
5d0103061514163332363717060706232226353437363702062322263534
3713363534262322060727363736333216151407030615141633323e0237
3703c4ae270d0b1129531e4f533733272c0d104baae5622e402c5720110a
152a4a1f4b544036252f285e271915216ab17341160371fdac852312111f
6c177d3b262c2322384af8fee9d440314b9b01356f1b0c111e601674372b
2f25368bfebd8423131742e3c7d94c00>TimesNewRomanPS-ItalicMT AddT42Char 
2 0 0 <0002011c0000051c050000030007003fb40201f80607b802664013000504
f803000a0704f8010019080605f80203b8014ab309a2dc182b10f63cfd3c
4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121011c04
00fc2003c0fc400500fb002004c0>TimesNewRomanPS-ItalicMT AddT42Char 
TimesNewRomanPS-ItalicMT /CharStrings get begin
/u 88 def
end
TimesNewRomanPS-ItalicMT /Encoding get
dup 117 /u put
pop
end
%ADOEndSubsetFont
/REFKNJ+TimesNewRomanPS-ItalicMT /TimesNewRomanPS-ItalicMT findfont ct_VMDictPut
/REFKNJ+TimesNewRomanPS-ItalicMT*1 
[117{/.notdef}rp /u 138{/.notdef}rp]
REFKNJ+TimesNewRomanPS-ItalicMT nf
REFKNJ+TimesNewRomanPS-ItalicMT*1 [0 -12.0164 -12.0164 0 0 0 ]msf
210.677 103.146 mo
(u)sh
/REFKNJ+TimesNewRomanPS-ItalicMT*1 uf
/REFKNJ+TimesNewRomanPS-ItalicMT uf
/TimesNewRomanPS-ItalicMT uf
/REFKNI+TimesNewRomanPS-BoldMT-Identity-H uf
/REFKNI+TimesNewRomanPS-BoldMT /CIDFont ur
/REFKNH+TimesNewRomanPSMT-Identity-H uf
/REFKNH+TimesNewRomanPSMT /CIDFont ur
%ADOBeginSubsetFont: FLDBAA+TimesNewRomanPSMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (FLDBAA+TimesNewRomanPSMT)
%%Title: (FLDBAA+TimesNewRomanPSMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /FLDBAA+TimesNewRomanPSMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-568 -307 2046 1040} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 4685 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 9 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB
222483BD74F8B> |
16 <001C60D8A8C9B81F2C797FA61189B8881D0DB497EEC4F8> |
87 <001C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED294
48713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC
43DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E79
8B36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |
75 <001C60D8A8C9B7A73DB904DA2C7A38531EB5E07DB80E9375E00037710435
E027FD1F7B471BB2C47AEA703B8CB5C9C005CAA0B77F572194961F7C30413194
A0134D3FF9BA81F629AD195D96BD3C1285904670FEB33C334E260F33EE9AB1A2
D9C0C66E38CE4D3CA583879DAF16CE988CC2A14E39FED6599F4B0F3F8F061B58
5E2410824AE8C179E66BD3AD9F6E34CD8CBF79298E3E4553D0E9DCA292805DED
8E36C58209B17E38B2DFAFEB881CA5FB9EC7A76A0CF0C4BFE83CE749EBD15B15
E97FBEA4E90F2186A54E69C28F4083AB76DBE019E4C57B27760FED872C448379
6F735A795EACD82F245D81FB43B5> |
3 <001C60D8A8C9B8707C25> |
56 <001C60D8A8C9B6079F6D024388243061A610EA3A6326F33263CDE8BCFFE9
F148F3D7F4C9725D2BAF9A3232BD1EB145B5A77D8B0651FBD8E8A9FB06CCD2A8
CC2722C436D9102F6A183E894B34B7045CE7C217957AA9B87F4515C93092C441
847223DE93B9E3D8ECF6C02AE8C75FDAA89CB34F7A7CE8EBAED7CDD0E6765B39
52A1A95E2E1735ECFE4DF6802DC3188EE398A9F5CCD7DB8E0B3AB2D84DF5AF6C
30AB040D323559946C1407613CE0866FB1002EF0B5DF66414A685DAD87F9D351
3811F878AD> |
86 <001C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC2
2ACE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A
039A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF
40BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359
FAAB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C5
93B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF50
9B93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |
72 <001C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2B
EAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A
15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7F
FA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA5013189
84A59E1CFFFD06EA629758085868D3F5F7204292> |
85 <001C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2
CE6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E9
83E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B
53A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA4
55AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D
8C360275B503E4954E912CD342> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /FLDBAA+TimesNewRomanPSMT-Identity-H /Identity-H 0 [/FLDBAA+TimesNewRomanPSMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/REFKNK+TimesNewRomanPSMT-Identity-H /FLDBAA+TimesNewRomanPSMT-Identity-H findfont ct_VMDictPut
REFKNK+TimesNewRomanPSMT-Identity-H [0 -12.0164 -12.0164 0 0 0 ]msf
210.677 97.1375 mo
(\000\020\000W\000K\000\003\0008\000V\000H\000U)
[-3.99182 -3.33105 -5.99866 -2.99457 -8.66632 -4.66492 -5.32574 0 ]ysh
214.194 155.219 mo
214.194 169.385 li
221.277 162.302 li
214.194 155.219 li
.0704356 0 .894438 0 cmyk
ef
214.194 155.219 mo
214.194 169.385 li
221.277 162.302 li
214.194 155.219 li
cp
.92929 .879301 .889677 .799283 cmyk
@
260.257 155.219 mo
260.257 169.385 li
267.34 162.302 li
260.257 155.219 li
.0704356 0 .894438 0 cmyk
ef
260.257 155.219 mo
260.257 169.385 li
267.34 162.302 li
260.257 155.219 li
cp
.92929 .879301 .889677 .799283 cmyk
@
319.02 162.009 mo
309.104 162.009 li
@
302.021 154.926 mo
302.021 169.091 li
309.104 162.009 li
302.021 154.926 li
.0704356 0 .894438 0 cmyk
ef
302.021 154.926 mo
302.021 169.091 li
309.104 162.009 li
302.021 154.926 li
cp
.92929 .879301 .889677 .799283 cmyk
@
231.193 162.595 mo
221.277 162.595 li
@
214.194 155.512 mo
214.194 169.678 li
221.277 162.595 li
214.194 155.512 li
.0704356 0 .894438 0 cmyk
ef
214.194 155.512 mo
214.194 169.678 li
221.277 162.595 li
214.194 155.512 li
cp
.92929 .879301 .889677 .799283 cmyk
@
276.523 162.595 mo
266.607 162.595 li
@
[.71968 1.43936 ] 0 dsh
149.863 239.334 mo
208.137 176.223 li
@
205.206 174.611 mo
214.194 169.678 li
209.993 179.007 li
205.206 174.611 li
ef
149.863 239.334 mo
252.735 174.172 li
@
250.292 171.876 mo
260.257 169.385 li
253.76 177.347 li
250.292 171.876 li
ef
224.941 239.04 mo
256.203 177.347 li
@
252.979 176.614 mo
260.257 169.385 li
258.743 179.545 li
252.979 176.614 li
ef
224.941 239.04 mo
215.562 178.47 li
@
212.485 179.789 mo
214.194 169.678 li
218.884 178.763 li
212.485 179.789 li
ef
104.484 239.04 mo
206.672 174.416 li
@
204.229 172.12 mo
214.194 169.678 li
207.698 177.591 li
204.229 172.12 li
ef
104.484 239.04 mo
252.1 173.048 li
@
250.048 170.41 mo
260.257 169.385 li
252.686 176.321 li
250.048 170.41 li
ef
224.941 239.04 mo
37.1237 172.608 li
@
36.8307 175.93 mo
28.7221 169.629 li
38.9799 169.824 li
36.8307 175.93 li
ef
165.836 83.023 mo
164.859 83.023 164.126 83.8534 164.126 84.8792 cv
164.126 85.8561 164.859 86.6865 165.836 86.6865 cv
166.764 86.6865 167.497 85.8561 167.497 84.8792 cv
167.497 83.8534 166.764 83.023 165.836 83.023 cv
ef
[] 0 dsh
165.836 83.023 mo
164.859 83.023 164.126 83.8534 164.126 84.8792 cv
164.126 85.8561 164.859 86.6865 165.836 86.6865 cv
166.764 86.6865 167.497 85.8561 167.497 84.8792 cv
167.497 83.8534 166.764 83.023 165.836 83.023 cv
cp
@
172.039 83.023 mo
171.111 83.023 170.33 83.8534 170.33 84.8792 cv
170.33 85.8561 171.111 86.6865 172.039 86.6865 cv
172.967 86.6865 173.749 85.8561 173.749 84.8792 cv
173.749 83.8534 172.967 83.023 172.039 83.023 cv
ef
172.039 83.023 mo
171.111 83.023 170.33 83.8534 170.33 84.8792 cv
170.33 85.8561 171.111 86.6865 172.039 86.6865 cv
172.967 86.6865 173.749 85.8561 173.749 84.8792 cv
173.749 83.8534 172.967 83.023 172.039 83.023 cv
cp
@
178.585 83.023 mo
177.608 83.023 176.875 83.8534 176.875 84.8792 cv
176.875 85.8561 177.608 86.6865 178.585 86.6865 cv
179.513 86.6865 180.246 85.8561 180.246 84.8792 cv
180.246 83.8534 179.513 83.023 178.585 83.023 cv
ef
178.585 83.023 mo
177.608 83.023 176.875 83.8534 176.875 84.8792 cv
176.875 85.8561 177.608 86.6865 178.585 86.6865 cv
179.513 86.6865 180.246 85.8561 180.246 84.8792 cv
180.246 83.8534 179.513 83.023 178.585 83.023 cv
cp
@
[.71968 1.43936 ] 0 dsh
224.941 239.04 mo
295.427 175.1 li
@
292.643 173.243 mo
302.021 169.091 li
297.039 178.03 li
292.643 173.243 li
ef
224.941 239.04 mo
124.071 173.879 li
@
122.997 177.054 mo
116.598 169.043 li
126.514 171.632 li
122.997 177.054 li
ef
104.484 239.04 mo
115.084 177.835 li
@
111.762 178.079 mo
116.598 169.043 li
118.112 179.203 li
111.762 178.079 li
ef
104.484 239.04 mo
293.62 172.071 li
@
291.812 169.287 mo
302.021 169.091 li
293.961 175.393 li
291.812 169.287 li
ef
149.863 239.334 mo
120.408 177.102 li
@
117.819 179.203 mo
116.598 169.043 li
123.681 176.467 li
117.819 179.203 li
ef
149.863 239.334 mo
293.961 172.853 li
@
291.861 170.215 mo
302.021 169.091 li
294.597 176.125 li
291.861 170.215 li
ef
239.595 394.081 mo
239.595 354.204 li
230.314 354.204 li
230.314 394.081 li
cp
/0 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 615.065 355.181 ]ct
[39.8771 0 0 9.28093 -38.9 375.47 ]ct
snap_to_device
<<
/T 1
/W 102 
/H 24 
/M[102 0 0 -24 0 24 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
r;Zj!!r`9&"9n]'#6kD8#RLh?$b-0;$k<%5"qD%P&-E"Hqu@!8',2/s(Dn"i])VpO)]Tmn!!NNI*s2`j
q>^O>)rq"N!!XVl,U<Zu-27HD-7:2D""F*I!\,]Ob5h#3"tV>Y0/*JSp](IP1&qO]1]%.R%4a9D!!>(\
,lmcA#;e4p!&k!>3W&jX3]kdj!B`O>!!5>K5k4mV2$50#!!beV6N@9X"%E+f!CfTY!7h,O84cGL!!>kf
2*g^4!]:'+q#CFB:&Y+p7KZBhrW!!(*^SlfmJm;)3(j&J"%uE?;"4Me2$50#!!,/YrW!$u;Zf8`!!5/[
1sl:+<E;]l!!N?&='/TJn,NMI""!dD!^J8>r;[(,"'crK!(]3K!!uq'?5+_V7pfXaq>^U.@:EXB?NX^`
@k.'M#ZXeM!!$(oA0C=@!AsrZ-2ITC6!H_T!!d';AnM)DBPI>D$Yi3R")D^iDC9@A'Dqh=ECBs37<3He
FEMbNGk(h=D0ZhA9RAVa!!5"[-2ITBHqjM=#qC?*A,lfT/-#\I!!3r=If06KInkNFqu?eMK7s+%!elA*
nGi\hGDCu>m/R2F""!dD!BZ/8!![9BG)AIo5ktB]>DnI<!!8,^Nr/kY/H_(2!!4'p5k+gV//A>%li7)E
""!gE!^K_HqZ$d;6j"H"OnetZGXR];qu?e^"$HJ]!d+U0rW!(d.KGPlnGiOu"9b#LG":p"!]:'+qZ$[j
*^fc("IB4R=ZlK[!Z2$,qu?g5"!/rj!"0ob*0gL(R@9TFC)ZXC#8<Vu!!&Tk?g[mq2$50%!!.J>q#CPZ
<Wekbq#CJ:""jKP"JL:=UL!ct#8<nf?(2"<QL=eUN)#oVrW!!Y<akFs!]:'+qZ$XdV>(#nE!)s;!;Z[$
*Wr==WJuEYWql]#IKP"eVlKp$n,NQL:9>0,!!5)[@IO6uSHBi0!!=?RXr$j5!b)88q#C^27'M6IZEopK
[/'b'[0$RHRs;BNWpp&kOLVD*q>^RU<i,?e"#ROj1&_.WLm+u?Y.B)Y!!6GE.JWrF]*!lf!!<D;]b:5C
#U$jr^]4@?_.rK?!cta^p](@3.mWe.&1fMG_Kfb2`5SXoa2j2`aXm5f!L3lb!!::FV>UAr4p&;.qu?d3
Mp))"!<t+E!!"/7!!"/7!!*R@#DFSM2RL^lPir)Kc=TuQ!!95(=o/1#V$#&P!;ZZs#)CS'!"70VBE/$)
R/d5p"1tf<#,+%9"1L:8rW!8Q".B3tdjht9#Qk0he/>Rm#.01-E)_f6rW!CsQG,6(eLGI/1"JeE3U?b&
!.Y~>

%%EndBinary
grestore
np
239.595 394.081 mo
240.914 394.081 li
240.914 354.319 li
239.595 354.319 li
cp
1 /12 /CSD get_res sepcs
0 sep
f
241.451 481.175 mo
241.451 445.309 li
231.242 445.309 li
231.242 481.175 li
cp
/4 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 615.065 355.181 ]ct
[35.8659 0 0 10.209 -125.994 373.614 ]ct
snap_to_device
<<
/T 1
/W 92 
/H 27 
/M[92 0 0 -27 0 27 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
qu?]tr;m!%"Sr*'"Tel5#R1>:`W-&I$Olh2"q;%Q&-;nFq>^a5',1KR'c%V]!7(WI(`=52pAb@:*?G8(
+Sc!=+X//[!;6Bt+=&6N-3>P7pAb@F'Ia+c.es&G.kE9n!!b,00Ea*31*$#g"Z$lF*WcTI2#71Q2)`>P
""jX1*;BL=2`Net3W]@Eq>^OY4m2n$!!>Cd1*$&h#X:R?!('$S6q."R!_+2#jT#?Q*>eDL!^91Jnc/gn
!'UH>)u'C692,<b"#^3T:Ab(n:Dl+Q!!=B@;,[/h"$Qfc2t-eL4p!JZp](=o<W2t#<`]>Rqu?b"2Z3X=
!!=0C#?ps(![IkPmJm>Q!\tbk!!4`W,Q.TE>ln>>r;Zk+@H%7h@Uhb<r;Zp"A-6E1!!>Cd1*$)i!bQ(3
r;Zq59`bLt!!6kLCZ,6qCha4urW!":"#]EF"$QcA*;TX:!,aps!!s'P![hpe!,-@mhuF!uF*)O)FoupR
!!>Cd1)p#h!I%cF!!d`M!a#F&GpVnZn,NV\H4Vu]I-L\64p!JZq>^R*H7Sjm#9cqGI0os[Ibau+Ih2Z;
oDnRb"$QcA*;TX:7NI$V!!b*,!ePq&K6>uM",$m\L$8R>4p!JYq>^Rf3"5W`!epaX"&ju$$JkadJ.RNn
MMpa""$QcA)u9O8>E&@X"U^4jN`D/;!!A=FP'-^'!\KUMnc8Xh#a>mc7K<paQS%P("$QcA*;TX9R"kA9
"HifgR;Vp&"b2tPS!eEu!!50H54AOSPan"*rW!%kStC&j!!,7b!AYYl!!5W"5PP3]TEkU#B)DW44r"'H
!^?S`!\+8FnGiY-;-=n:!!?m=U($Gi"$QcA)uBU992P<^"/>pnJ,K?N$DjU"T*#:q!!"ULWBp(T!uE.%
)u9O:Wg5aUmf3Hj!\t,^!!dJEX`U_.Y@@;-!g<\iqu@,0Y5gkoD[ZUGB!\l8!!?+HLhuhd!20Gu#n6G+
'!Xd2(LR<195nSa[^RTn\XZ'Bp](=$"Si$!\cR'S!!39)1%G;GPG9)j!!8iDZ1J#/%_G!=1*T'sUnh6P
]gcfW+bWJ_!!.R.q#CIiQ<O7f"Z$2f!3pRr!!>P)LN*5Y"2.2@(Ztc#$Fd_VrW!*u^HtB)Z2F[2!!87A
_>XE<,6G4PTu,I_fDl8oSs'/l!@!=>O"7X=qZ$qa`'e+S``d,n0$40E~>

%%EndBinary
grestore
np
241.451 481.175 mo
243.014 481.175 li
243.014 445.663 li
241.451 445.663 li
cp
1 /12 /CSD get_res sepcs
0 sep
f
262.944 288.669 mo
262.944 255.604 li
253.809 255.604 li
253.809 288.669 li
cp
/5 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 615.065 355.181 ]ct
[33.0654 0 0 9.13438 66.5119 352.121 ]ct
snap_to_device
<<
/T 1
/W 85 
/H 24 
/M[85 0 0 -24 0 24 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
r;Zj!!r`9&"9nZ&"pP/7#RLS?aT)>L%/Kr.%1Wm[!s9/4!!X&L&/5ip"n)HI!!=#S)%lWD"WA=""!&HZ
!!+/ab5_eY+X.mN"!djHq>^[",pjuA./EoE.434<"tD,S/M7,Np](LO0E<g01,Jh.!]2bmm/Yl@!]L3,
q#CXU3#2KE!sq!c!!**]jT#??,Wk`#!@U)#!!>.^,QRZ@#6c:i!'NLJ5PtK^5XFK3"%"_0%J]u*6ki)[
!!5(],l%E@7R-kP"%NFr8GrMh8P8@Mp](Ch9LDJM!!5ki:[e>c2Zk?$!!+`=rW!$s;$0_q!!6(u)WLf"
4[W4$r;Zn"'Na`'!]L3,q>^RQ=?6<[#?_.4*WQ1/3rK$Z>?q/5"%HU'7fHZp?V4_u!!k_r@Trg4@h`JA
!!5(],l.KBAS*"^!!d-a")%Z705:@b%r,lr+@'d]")i-uDfTo@!;$6q2Ka1)9hoBh!!5(],l.KA7<eY0
#C(Lr1&q;5HN!mGH[L8@!!4'f>5\F%7=Xh-"<&81JO\u+!B1)\,l.KABeT>`#(cr098"KGrW!!1ApF:T
!elAar;ZjYM!tBHM$&Vkli7)G"!m^C!I%!0!!\@?""T?`1]@@TN[Xi+!b2=nr;Zn\D#j,,"D)%0Oco&2
!]L3,qZ$[UP@aRj"HrqPQ&knE!gXEMr;Znc")%Q4!LT;G!!["lAt#-H0^Si?2ZX"+qZ$[XQS\I<"9AT+
RqM^#!&ONQ"*C&RSc&Ng1\(MO8=ieL!!&XMT^Dd]2Zk?&!!-eRq#CPkFp"H[p](@*UE]O7oDetaUm%8G
!!8RIQ1"\S2Zk?&!!+igp](Al"#]fQ!f7#VmJm?eRi@[j!!8RIW:0cg3!3mo!!YQbAco'6XSMnu1p*YL
!!4bTY3u>m2Qs?<q#CIb'X@<2&2ph,X0Vo8[B:ipP9I@nLU['Z!CVk@!!>Q<ZRu%So`,%[T:tuZ!P#]5
!"$6K]<JMU<,B15k5YRr"'!VIhuEhT!th^:![7^nqZ+/,#W'.5FbTuQ2]1!Dq#Gp~>

%%EndBinary
grestore
np
262.944 288.669 mo
264.214 288.669 li
264.214 255.697 li
262.944 255.697 li
cp
1 /12 /CSD get_res sepcs
0 sep
f
155.382 149.943 mo
155.382 116.445 li
146.053 116.445 li
146.053 149.943 li
cp
/6 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 615.065 355.181 ]ct
[33.4985 0 0 9.32979 205.238 459.683 ]ct
snap_to_device
<<
/T 1
/W 86 
/H 24 
/M[86 0 0 -24 0 24 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
r;Zj!!r`9&"9nZ&#6k88#RLS?$crAL$k<%5"qD.T&H`+JqZ$g6'GVB"(`DfCgAh<n)B0[k!!OAa*s3W/
q>^O?,K]ui,UFcb-j'Gup](Hu.OtQ&/G]>I/M>0G"tqYU+W^_7p](LQ0`Ws2&Ms=b!]2bmnGq,?!]L31
p](LX!<>+^3W]-Y!]rA(jT#?F5!ScA!C/sB!!E9%2ZkN)!!bhX6i]&4"%N1g!Cmd`!!=5s84*+P!_EVh
nGiVL""F$G!D?,c!!>pt)c$>3!DcPa!:Tsj;,U=lqZ$[h#?C6n!]L31q#CFM:&Y+p<`]A>rW!!V+'@M&
"$Kdc>5\F&>6dmq!;c`t2ZkN)!!*:/r;[+/"(!,N!"`KFqZ$q1@8LEC@:NhZB(5j,1hUK(!!"Wc*:<e.
2ZkN*!!6+HCAe,;$jd#O!!#1qq>^RWC]aoZDJsK6EcZ?m!!XHdG$8*aGO5A3GQTDk!!.@kqZ$hI"+4\\
I0'-D!e+uFqu?eJ"+]nA"<Ae>#Y4RgpAb7R""F'H!J2<g!!Y%XK0Tek>58."KEHr+!!6O1L@>0FLBCUY
li7)G""F*I!XguDqZ$gWM$&VsM[TC^"98F\!tbA1!\"4/nGi`J)f&f?%IF,sGQTDl!!68INqr_YDZc%o
OSJkY4cPR6r;Zp?Op!l;!!e8aP5mD'?3U6,o)JhN""F*I!L8uH!!HJl".21G!!8R@*rZ-B$P+V+M"1NI
P6[QU!!?gjOdke>!]L31qZ$Y:GPD.?S-,=RrW)ir#tG(4JtJ^0F.s]G!!6qMFSl+@USO$$n,NNS"/Ynq
!iDkqp](@+K-'df#UP+K=K%]5=)da2!t1q1UA=ij4=($+WU^#k$`X<0rW!.PXH.5#I&6W=!CO$c!!>Bf
ND]WS!db$=oDeraB6<nK!^$[ko`,Q.Z3IYB"0FM>[>;7"[h&S0q#CH*CA@i2&;*IM!!6d8WUg)i\b,q&
\b,q/>.U!2]Ob=K/hZ>f![7_1r;Zr0=1o:5!6bEE-+'rU!!Z[1^:sZI^r6<K!!Y5;VS*3G_>XE=000B6
SkR#6!!ZOW2&.Kt_u0Q<CW&2^8auf>!.Y~>

%%EndBinary
grestore
np
155.382 149.943 mo
156.652 149.943 li
156.652 116.727 li
155.382 116.727 li
cp
1 /12 /CSD get_res sepcs
0 sep
f
339.536 149.943 mo
339.536 116.664 li
330.255 116.664 li
330.255 149.943 li
cp
/7 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 615.065 355.181 ]ct
[33.2795 0 0 9.28093 205.238 275.529 ]ct
snap_to_device
<<
/T 1
/W 85 
/H 24 
/M[85 0 0 -24 0 24 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
r;Zj!!r`9&"9n]'#6kD8#RLh?$crAL$k<%5"qD.T&H`+Jqu?s8'GVAh(Dn%Y!8RVW)B/r%p](I<*ZkJ,
+o20>+rAE&#S/.*,UEO>!!)iq"Xb]I!s:%M!!4Z%)Tr*b/M8\10`rct!!P+j!!`T^qZ$[S2&#?WgAh:5
""*gD#9c#c!'(-B%K$2,4$;R(!BiX@!!5@t+n>U82?P9+q>^ac5sbPl,m-O4!!,J8j8]6M7OS!3!uaZ\
'Cl,)2?P<%!!+H<rW!$l"%l5c!!5J./aWQ4!!5hg:AY"n)G`XLnGiVK""*gD!DklW!!?(r"&o1!!`W/5
iW'$\9htWe!uas:=RZ:l2?R+Y!!3fb&,cJ5,Qh3`!!#)CqZ$q,>QJ+F-RW4a?gn%$<_Zm#!+8T(=RQ4k
2?P<&!!5Do6N$lh>Q\Fa!!$M>qZ%(:9I'^P=_A^FBJVjQ!:p0p<bZ;aCdD1k!!5%\-Md]C?:ato#Ak%T
D?*!E)Yj@7DZatW!!=eZ:N>n)"EJR*,?X=5!B(#[-Md]C:cnOS#&aTd?kdd.q#CJ@H!gIL!]:(+nGiZ<
Hilh(!!5%\-MmcE'7C;d!!R^u"'KpXq#CL#IV+*.!!<mb"#'3F"YCL@<e>;X!!5%\-MmcEK7lSf!!IuX
L,Fb^!!7rYM>R>UC'-"ho)K#QM`2dZN(.dS!!"nX""*mF!@L;2!!J9q"-+Dt!!82`OT#4_OY2fNPOebV
/X1p<rW!"Y7W@er!]C--qZ$Y^;tp=oQ32C,!",%pR$jD4(,ZL#!;$6n/Y%KDqu?eW7W@hs!eCGdqu?eh
SeCeu![e)Bq#C^oI\882)@nVoU%86dU.68Sq>^SU9r%4Y!ga!OrW!.uV5C/f>,_8t!aC2Sq#CJr"0;A#
!iuK*o)Ji11KaDP!j,NIp&GXBUopm."*HnIR%:I@;&HQjq#CH$6MUT_ZNIT5!!BW<[K,q"!*Jmo!%[^B
#to$B.M0,#WE`]l!!8L4]);U1]*#^s!9*t["sjlZ!!^+=^&WA4/%koeOb6=0^He"^!!4,B^]OQ;1*O=2
#+^;j_*PrUrW!*3,A+m5*SLMh!.Y~>

%%EndBinary
grestore
np
339.536 149.943 mo
340.806 149.943 li
340.806 116.727 li
339.536 116.727 li
cp
1 /12 /CSD get_res sepcs
0 sep
f
203.253 420.214 mo
203.253 413.209 li
195.632 413.209 li
195.632 420.214 li
cp
/8 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 615.065 355.181 ]ct
[7.00507 0 0 7.62013 -65.0331 411.812 ]ct
snap_to_device
<<
/T 1
/W 18 
/H 20 
/M[18 0 0 -20 0 20 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!!**$!<E3%!<E3%!<E3%!WrQ/"pY/0#RLhG"UkhM!<E]B&J5Tf!<EE=&J5Te&JPrq!>c=[(`<>T!ZDX_
&J5Te&K:`j&J5it!<E6?&J5Te&J5Th*?Ge)(`<>T!ZDX_&JH5u&J6-/&J5it!<E6?&J5U!,7tM",UF$7
(`<>T![\Kk&LSt=&J6H6&J5it!<E6D&Lo::/.iI+&J5Te(`<>T%h:0D!<F;T&J5Te&J5it!<Fi-('+F:
+;#1t&J5Te(`<>T0esCu1]]HG&J5Te&J5it!<E6[&J5U63"Z`7&J5Te(`<>T!ZDX_&NMla&J5Te&J5it
!<E6?&J5U:&.oKd&J5Te(`<>T!ZDX_&J5Te&J5Te&J5it!<E6?&J5Te&J5Te&J5Te&IngB#<WS1&J5Te
&J5Te4['ed!<E0G5!M:u&J5Te&J5XB6OlLP74q%s7n=4(&J5Te~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
203.253 420.214 mo
206.232 420.214 li
206.232 413.229 li
203.253 413.229 li
cp
1 /12 /CSD get_res sepcs
0 sep
f
203.253 317 mo
203.253 307.704 li
195.437 307.704 li
195.437 317 li
cp
/9 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 615.065 355.181 ]ct
[9.2964 0 0 7.81552 38.1807 411.812 ]ct
snap_to_device
<<
/T 1
/W 24 
/H 20 
/M[24 0 0 -20 0 20 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!!*-'"9\i2"pYD?#mgnE$4@7I":YhO&.oNg',)#n'c%Sl#mgnE(`=52'-&#6#mgn[',)$%#mgnE#mgnE
#mham+sRC##mgn`',)$*-4'tb#mgnE#mht-.1$:e#mgnf*>9)".gZLg#mgnE#mi.7-4'tb#mgnE/e\m3
0/*\=#mgnE#r+1k#mgnE#mgnE1c5p['/g.'#mgnE#r`MW#mgnE#mgnE#rrY4'082]#mgnE-7q=d#mgnE
#mgnE#sCHc',*S:#mgnE5SHEi#mgnE#mgnE#mip3',)E1#mgnD6UX?L#mgnE#mgnE#mj'k',*o.#mgnr
'1rQ;#mgnE#mgnE#mgn@',)#[70uU\3_]ne#mgnE#mgnE#mgo5:D4C;-OE!N:^IF7#mgnE#mgnE#mgo,
()%>p;$dh4;[Ea:#mgnE#mgnE#mgnE<(IZ95#i7s#mgnE#mgnE#mgnE#mgnE='-+L'3SLC#mgnE#mgnE
#mgnE#mgnE$!\,W',+XX#mgnE#mgnE#mgnE#mgnE#s10]'4)mi#mgnE#mgnE#mgnE#mgnE#mjrP'+bHV
#mgnE#mgnE#mgnE#mgnE#miFr9OS56#mgnE#mgnE~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
203.253 317 mo
206.232 317 li
206.232 308.061 li
203.253 308.061 li
cp
1 /12 /CSD get_res sepcs
0 sep
f
201.934 512.975 mo
201.934 508.654 li
196.756 508.654 li
196.756 512.975 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[0 -1 -1 0 615.065 355.181 ]ct
[4.32019 0 0 5.17778 -157.794 413.131 ]ct
snap_to_device
<<
/T 1
/W 11 
/H 14 
/M[11 0 0 -14 0 14 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!"X%ZFHN#5)'CPVpr;;JZ-r^h@uRKAH2]1!#s/?'\r%:!!!!!!/9VNi9ej81DBfh)-$dEmHs<'dD1qt
!!""SmHs<.mHreY!!$?Im-X3-mHr"7!!!?kGcSjImHp=P=9&=$!!#4(mDnV/!!!!!!!$-g`p)c%!!!!!
!-mmkm-Wu68MrhnkJ7kUKiPb4d*K[V$NL~>
<~!!"6XSu%9*0Q.4'OijSFC6HKme.@Go;#gRr!#<9"&CKDf!!!!!!,gR'f&4DR-4g.W'12hmi8EPI`ijb6
!!!b;i8EPOi8E-s!!#[(hr*GNi8D3]!!!9[@@"CWi8B6b70!;f!!"^`i4.^I!!!!!!!#IG\)#n>!!!!!
!+Ff0i8E@P3@H\+gTV7'DF:AA`5B#m#lj~>
<~!!"3RQCWRe/nkRtM8l3,AW"7^dggog9`P.n!#2uo%aa2c!!!!!!,10ue`4>J,n9nT&jQMaj5]1S_PqW#
!!!b5j5]1[j5\Ws!!#NtiT&tYj5[Q]!!!9X>`Q)Ej5YNZ63$uc!!"XYj0I^C!!!!!!!#@GZ/4D7!!!!!
!*nQ'ioAgN2^^=tgo1doBL&9-^qR!X#lj~>
<~!!!!!)^tgg!!!!!#bEaN!""Y.[K$?P!!!!!!!%GY!3s]I!!!!!!!'q;]$,s1!!!!!!!!!<bfn;JPXb]R
!!!!hbfn;TbfmQs!!!"=b08)Rbfk&,!!!!!!"EASbfg&=!!!!!!!!"6b\#'d!!!!!!!!#C@E$:f!!!!!
!!(4CbKRj0!!!!!_asiT!!"j<O,@0B!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
201.934 512.975 mo
204.913 512.975 li
204.913 508.774 li
201.934 508.774 li
cp
1 /12 /CSD get_res sepcs
0 sep
f
109.027 99.4356 mo
109.027 86.1891 li
102.335 86.1891 li
102.335 99.4356 li
cp
/10 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 615.065 355.181 ]ct
[13.2465 0 0 6.69203 255.745 506.038 ]ct
snap_to_device
<<
/T 1
/W 34 
/H 18 
/M[34 0 0 -18 0 18 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
('"@:!s8Q,"U52;!so;B"U,;8!Y#VMp&tI+&H37R&ebE_'bM#n(Dm;Z)&a)+*#S>P"<ANq&KgrT"!A1!
,5hZH,:"T+"U$.a&LT"+"Tp1c&M!__!\5fMr<<-'![93Kr<3cd0G,Qb"U-Y;&J6i?"U-bA2uNmb/iYj%
+$)JGqumW6&J56O"UmOX&O/Ma"[PIBr<3Eo71^1L&KsXA"V3jg&P,Is-O;:r&HW+g92,6e#9?N67KF)s
,5_TQ*?Yq+"Af[q"]5k01'.h^<;6V!<=r"NqZRHZ&J8&F=<.QJ&J5Ec3a2:^!s'!0,5VNQ>?hbG86uH'
$UPG4(LQn?!s'!0,5VNE?t'$H#\!r@/e/I=&S(P=!s'!0,5MHDA.\kTAS1oF"D8;YBH?gN!s'!0,5MHF
6tm6Jr<39_CCtCV"Tnc;:EoT<!c;g;qum-V!$_+?!s'!0,3&h/!>/*OiroO'&SiEM"UT,o)0'F(8oeok
klhB*F&aZ2.s6"EGCT~>

%%EndBinary
grestore
np
109.027 99.4356 mo
110.443 99.4356 li
110.443 86.3934 li
109.027 86.3934 li
cp
1 /12 /CSD get_res sepcs
0 sep
f
291.861 97.9213 mo
291.861 83.4252 li
285.169 83.4252 li
285.169 97.9213 li
cp
/11 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 615.065 355.181 ]ct
[14.4962 0 0 6.69203 257.26 323.204 ]ct
snap_to_device
<<
/T 1
/W 37 
/H 18 
/M[37 0 0 -18 0 18 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
('"@:!s8Z0"pYD?!s/f;"pPJF!WiiBo*,4,&cNCT',1WS'bV,p(Dm>\(`=5))&r,N"<8Ep&g$uU"!8-u
+oMTI+sS?Zn-0"B&eYj*rWWNS&eZVt"p>,7.P!(="qiL?&eZi%"u$i+&hu-G"uA(n1[YGY2A-W[1Boct
3>)rc"pR.O4m`Fb4t@715R'M@6UVPD70Y#,8+d)^"qO6r&e[eg.lml-&f*`+9htTj$VsSr:eq9":Janb
;Z$_/3YE'(<)ls'='-)<>$G80"q+^C?XR:H"rLZS?t0$<%V&]UA7]@/"t`4UB+S`1r!!O47M6>J"pSgU
&e[,#"p$MmrXo6I"pP89C_AiCD>FG=+`7p2rWWIDE>!<h"p>bU&nk/A"pAu_&k$j<"p9!k&o[aR"*\u&
Er-%C9R.7Gr<<?pH4kT#"p6#r&o[aR"+=JgEr#tAIS51g"p0=++o)<C+aa;'DuKqCG?to&k6;$?+;0>+
"p99b&p!.>",%d0L&M8YL0,(Dk6;;?$5//OMAp2U&k4;H#42U%-\I>96B*-\NXh,#~>

%%EndBinary
grestore
np
291.861 97.9214 mo
293.278 97.9214 li
293.278 83.8046 li
291.861 83.8046 li
cp
1 /12 /CSD get_res sepcs
0 sep
f
95.9356 29.3889 mo
95.9356 18.4692 li
83.8215 18.4692 li
83.8215 29.3889 li
cp
/1 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 615.065 355.181 ]ct
[10.9197 0 0 12.1141 325.792 519.129 ]ct
snap_to_device
<<
/T 1
/W 28 
/H 31 
/M[28 0 0 -31 0 31 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
qZ$Zu!X%Ze"9\l4#70Vq"pkV@$O."KmJmS(%gERW&ebr`'c-9=!tH+a)?'U>!u`*o!!(FI!$(5'$QU91
+<_pR,QK,;-h@<I-n,?M.jHSs/h\n51,JP&!?<ot"uS=;!!NH`"pR%IoDetS#!4sD!!=nZ4ZW-7"$QoR
5l(H_5sdq!oDet]#";#W!!5Y]1\:YN8HoAd8k]$]"ADN;!!)]m!)EIs"A_ik,uX^B!)rIh!@JTX"p7"V
<"AEu!EE1q"p%e-nGiVn=u,mX!F&Lu!!6D2?Ma^*?XQ]=@f-E1A,ZH5A7]@c.;3F+p](D2CM[ke"orQ?
!"3@VE,e)H:FH2C:3-+0&p"6]&9ImPC*Y\;D?`lb!!"0bp](G?G6VbIqu@%0GQpql!!%9o62:K`?3LOZ
?N'p4!!"!`##?WI!.+otq#CKt0*Y2K!"0ck##?WI!&Xrb2^J;$"C<#O$T@k^'HD?%:FH2CI0ND5<dmen
9ONATJI))P'-)6$:FH2C>Coe+!ec8^0.Lrd62:Kd*-_Z`-ia7&;uH[u9-f:Kp&G48GQpqlkl:g4"sFcL
!!sDsM$OIn6Ag\Zmf3Y3N!g^MN=[1M"b6~>

%%EndBinary
grestore
np
95.9356 29.3889 mo
97.3033 29.3889 li
97.3033 18.7891 li
95.9356 18.7891 li
cp
1 /12 /CSD get_res sepcs
0 sep
f
280.138 30.1705 mo
280.138 18.4936 li
268.024 18.4936 li
268.024 30.1705 li
cp
/2 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 615.065 355.181 ]ct
[11.6769 0 0 12.1141 325.011 334.927 ]ct
snap_to_device
<<
/T 1
/W 30 
/H 31 
/M[30 0 0 -31 0 31 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
qZ$Zu!X%Tc"9\l4#70Po"pkVE$jI.Nli7>&&-`^Z',2/s([V2*%i?0&!!E9%)]TmA!!")'!"'ej+X.@8
*?tP0-1CmC-79!G.4QhQ/1i.P0(AoE!uqLM0DtkR0JNb91@Y>H1BoZnqZ$^>2?kr,!!<c:2`UX6!]^TG
nGiYD#!+jB!!36b4o,0R!!P+^#!P7:qZ$X_6Lb$U6i@2l6q'R88H&Sh"7Z?l8Hnqp!_P1'mJm8\/GTJO
3_UUd!;um!9hnL["on_l!!H+q;H$Qn"p#JYlMq#e<``E&"oqfs!!-7bq#CO9>6Y9Cnc/\q1&_1M!#7:q
"qUb7#[UkG@/p::?=.)M!+]Y+q#D-KAd2lJ!,-'S$>KP@BP@h]CB.QCD#"&I1L4Sn!!!Zm4pGj(!#'6a
#&aK\"pQAEqu?h.A-R&P!!>K,#'9bD&/0'gEr\?-FEMaHG<:%pH3OCs&,cJ1I!l3?rW!KVI0O`m14+I(
!e5WKJ:Rq]qZ$_GI0P<&!!Xcu#'0csK`(lQ<FTEkq#CMEL'D_u!!A")#'924",M[9C]4;92&6CQmJm69
$3pcm-6?!AN!>8TmJmT&73Yrr109M\L*;'~>

%%EndBinary
grestore
np
280.138 30.1705 mo
281.505 30.1705 li
281.505 18.5938 li
280.138 18.5938 li
cp
1 /12 /CSD get_res sepcs
0 sep
f
302.754 218.574 mo
302.754 203.697 li
293.473 203.697 li
293.473 218.574 li
cp
/3 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 615.065 355.181 ]ct
[14.8764 0 0 9.28093 136.607 312.311 ]ct
snap_to_device
<<
/T 1
/W 38 
/H 24 
/M[38 0 0 -24 0 24 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
!rr?'"9&E0"U52;#mq%K%1`@?!tPSI&b?;2!"oqZrY5_T#7q[X#n%Rf)ZCHR)]T\8n-K4='bqf,q$@$D
rY5DVmKj%@,8Cq8,l@uJ#ll:N'`]TK#mD\$'bqf=q$@$IrY5D[mKj%E,8Cq8./=/L-2nVZ-LM0D-R0?@
.4Fuu!%%UZ!%.UMo*GRJ,8Cq8(\n@;+T<)U-LM0E-R0?@.4QkE/-%:$'`]TK#luCurY5GU0)@4$0`Dde
-LV6J#q$r4'eqHa1G^N[1BAgZrY5D[mKj%E,8Cq82>IOY2Z=Ek-LM0D-R0?@+"6pk!%%UZ!%.+?"XbN0
'd"k$#m(D>-2nVZ-LM0D-R0?@+"6pk!%%UZ!%.XN$S44`3&q9O3]eZJ4T5Wj-R0?@+"6pk!%%UZ!%.XN
$U$Zg'gE!25X?,"$iUG9-R0?@.4Fuu!%%UZ!%.UM!'C<L'gqs,"%5Qm7f<Vr7hla\2>IOY8H'>(8c/ks
8kTmmrWrj):)-P2:f1+hrY5`=$WU46$!15+=oK-B>$G*6#mjm$'hnT5#[UjQ:C.86#@[U@$"Ff/A-iTS
AeG+C@L6ZYBIX;p>s8usrWr[5?PQB9$0_`uBgib1rWr[ACDBY-#m5!-'lEpV"'co_DWV65Df?G2.nXi'
;\aCsnd4sq$?gW<(^t\9=F5FDJ,~>

%%EndBinary
grestore
np
302.754 218.574 mo
304.171 218.574 li
304.171 203.968 li
302.754 203.968 li
cp
1 /12 /CSD get_res sepcs
0 sep
f
[] 0 dsh
153.868 574.082 mo
153.868 550.147 li
.92929 .879301 .889677 .799283 cmyk
@
150.595 550.929 mo
153.868 541.208 li
157.092 550.929 li
150.595 550.929 li
ef
161.83 574.082 mo
161.83 550.392 li
@
158.557 551.222 mo
161.83 541.501 li
165.054 551.222 li
158.557 551.222 li
ef
220.447 574.913 mo
220.447 551.222 li
@
217.223 552.052 mo
220.447 542.332 li
223.671 552.052 li
217.223 552.052 li
ef
210.531 574.913 mo
210.531 551.222 li
@
207.307 552.052 mo
210.531 542.332 li
213.755 552.052 li
207.307 552.052 li
ef
181.076 556.253 mo
180.099 556.253 179.366 557.084 179.366 558.109 cv
179.366 559.086 180.099 559.917 181.076 559.917 cv
182.004 559.917 182.737 559.086 182.737 558.109 cv
182.737 557.084 182.004 556.253 181.076 556.253 cv
ef
181.076 556.253 mo
180.099 556.253 179.366 557.084 179.366 558.109 cv
179.366 559.086 180.099 559.917 181.076 559.917 cv
182.004 559.917 182.737 559.086 182.737 558.109 cv
182.737 557.084 182.004 556.253 181.076 556.253 cv
cp
@
187.28 556.253 mo
186.351 556.253 185.57 557.084 185.57 558.109 cv
185.57 559.086 186.351 559.917 187.28 559.917 cv
188.208 559.917 188.989 559.086 188.989 558.109 cv
188.989 557.084 188.208 556.253 187.28 556.253 cv
ef
187.28 556.253 mo
186.351 556.253 185.57 557.084 185.57 558.109 cv
185.57 559.086 186.351 559.917 187.28 559.917 cv
188.208 559.917 188.989 559.086 188.989 558.109 cv
188.989 557.084 188.208 556.253 187.28 556.253 cv
cp
@
193.825 556.253 mo
192.848 556.253 192.115 557.084 192.115 558.109 cv
192.115 559.086 192.848 559.917 193.825 559.917 cv
194.753 559.917 195.486 559.086 195.486 558.109 cv
195.486 557.084 194.753 556.253 193.825 556.253 cv
ef
193.825 556.253 mo
192.848 556.253 192.115 557.084 192.115 558.109 cv
192.115 559.086 192.848 559.917 193.825 559.917 cv
194.753 559.917 195.486 559.086 195.486 558.109 cv
195.486 557.084 194.753 556.253 193.825 556.253 cv
cp
@
1 /12 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FLDBAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/FLDBAA+TimesNewRomanPSMT 4 GetGlyphDirectory
39 <001C60D8A8C9B6079F62679EB6BE171B70F78590F81AB62F69F1BD2EFC86
EAE566847745E296D0CF61872DA4D8690C62AB23EE8E1DEB0EAD4BD93A2494CA
759A81248BAF55E0D2E2E5FE71261287BF00F8CDF501793AB3272F80F7AE3E40
7CA730AC3648B3AC2D58C8D1FD60CD7DB1F886A79A4080D8870256B6E127906D
500379950803F077453028FB6169> |
68 <001C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC55
0DEC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C
6B177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB
333E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385F
DB0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E
70BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A298
95DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B7
37B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE327
2EF1EF1464C3F0D45D7CBB8749AF571E09> |
54 <001C60D8A8C9B7EF32243DA21D5631D8766D74D715030BA7905332A0CFAC
49387DB487F69FE973B04989A1F5B84226AC0574A3AC8A92A20A67AC6A93CF1F
8D7D050DEAAE8CF31B4A5FB504F0A0814E8C9022E7C7EFFB00070B62EB780F5B
FD7AC1407620155D4B738E953EA9E8519FCB3635DEED6C82D9AB968BE1131CEE
B6B072A246B745E2E47F0890CD4A4DD5061C30741173A5782D0F5AE0E6453375
18CA765AC1ABF9ABB13F9D6F8666630C08F558B2481DB7C0FEA08930FF35DE90
4907DBC222EF06C7863FAB3917A57116C566327E1977A70091D7628A2440BE3A
B444BD01341C54F829742469A9B1CF3048C0B204E355F432B93B12EA12C84F80
CE13D22435E5FCC1B5A000DE> |
80 <001C60D8A8C9B6FF86F5D75501F5946D14C10E01941D6F8F408CE1116793
2D24264D7EFCAC2AE86125FDD757A8758D869BC4213413CCB2A6A255440BA181
6E9DC45844CC319542821B45F7B81EE7391A0EDD08008613940B7EF538F41747
A2556BE4D609FA0E86A3720064373B35B3C09F29E00670FDA88D75DD91439C68
FD574D15688B76675600DF49F10BE44872E462D2FA9EDC453EEFA6E997D8F249
107C6F71C5B180EF91CFB08123DB5F12D5248BB769BCDBF86D09B3C1EE1D61D1
8CE6632A82186FF826CE8FF5C9F24094455D2446DAB1258D7CEF6AB64018AE95
5617323D2765A0C9FC9EE9EFC157214A4EF1A088A6CBE09BD12BF0618C85527D
987ABAA0F84BBDB3F467CD6D1AFC5F01D6CD6E91196626F968CD9EC222C872FA
FEC679ED97966B06F7D45253DA82AACAAC774A43132A3F4B4FB40FD07B5AFDAE
82B335C3B8E42DF7C6FCB1E78E5819FAE1E5B06EBADF2F71F0A59372AEE76B51
7996> |
!
end
end end
%ADOEndSubsetFont
REFKNK+TimesNewRomanPSMT-Identity-H [12.0164 0 0 -12.0164 0 0 ]msf
143.415 584.878 mo
(\0008\000V\000H\000U\000\003\000'\000D\000W\000D\000\003\0006\000W\000U\000H\000D\000P)
[8.6674 4.66605 5.32684 3.99294 2.99567 8.6674 5.32686 3.33212 5.32686 2.99565 6.67268 3.33212 
3.99295 5.32684 5.32684 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 /2 /3 /4 /5 /6 /7 /8 /9 
/10 /11 /12 ]]
] del_res
/REFKNK+TimesNewRomanPSMT-Identity-H-Identity-H uf
/REFKNK+TimesNewRomanPSMT-Identity-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
